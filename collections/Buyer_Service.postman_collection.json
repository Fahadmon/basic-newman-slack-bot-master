{
	"info": {
		"_postman_id": "55d98e2e-fcc7-4dbf-aff6-b5604956ddf0",
		"name": "Buyer_Service",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Filters And Seraches",
			"item": [
				{
					"name": "Filter_By_Category_Marble",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c179dc34-96fd-4492-a674-780424799967",
								"exec": [
									"pm.test(\"Response status is ok\",function(){",
									"    pm.response.to.have.status(200);",
									"})",
									"pm.test(\"response should be okay to process\", function () { ",
									"    pm.response.to.not.be.error; ",
									"    pm.response.to.not.have.jsonBody(\"error\"); ",
									"    pm.response.to.have.jsonBody();",
									"    ",
									"})",
									"pm.test(\"Body Contains IN_STOCK\", function () {",
									"pm.environment.unset(\"variable_key\");",
									"    pm.expect(pm.response.text()).to.include(\"IN_STOCK\");",
									"});",
									"",
									"  ",
									"   var jsonData = JSON.parse(responseBody); ",
									"   console.log(jsonData)",
									"  ",
									"  tests[\"IN_STOCK Filter is Present\"]= jsonData[0].items[0].code   === \"IN_STOCK\";",
									"  tests[\"OUT_OF_STOCK Filter is Present\"]= jsonData[0].items[1].code   === \"OUT_OF_STOCK\";",
									"  tests[\"COMING_SOON Filter is Present\"]= jsonData[0].items[2].code   === \"COMING_SOON\";",
									"  tests[\"Custom-Made Filter is Present\"]= jsonData[0].items[3].code   === \"isMadeToOrder.code\";",
									"  tests[\"Rating Filter is Present\"]= jsonData[1].items[0].code   === \"rating\";",
									"  tests[\"Price Filter is present\"]=jsonData[2].type   === \"price\";",
									"  tests[\"On Price Promotion Offer Filter is Present\"]= jsonData[3].items[0].label   === \"buyer.product.onpromotion\";",
									"  tests[\"Eligible For Shipping Promotion Filter is Present\"]= jsonData[3].items[1].label   === \"buyer.product.onshippingpromotion\";",
									"  tests[\"Eligible For Free Shipping Filter is Present\"]= jsonData[3].items[2].label   === \"buyer.product.onfreeshipping\";",
									"  tests[\"Free Sample Available Filter is Present\"]= jsonData[3].items[3].label   === \"buyer.product.preview_product\";",
									"  tests[\"Seller Filter is Present\"]= jsonData[16].name   === \"buyer.filter.sellername\";",
									"  ",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{token}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"lang\":\"en\",\"userType\":\"buyer\",\"orgIdfier\":\"scg\",\"f\":[{\"field\":\"primaryCategory.o_id\",\"type\":\"category\",\"codes\":[\"129\"]}],\"page\":1}"
						},
						"url": {
							"raw": "https://qa.nocnoc-internal.com/buyer-service/filters",
							"protocol": "https",
							"host": [
								"qa",
								"nocnoc-internal",
								"com"
							],
							"path": [
								"buyer-service",
								"filters"
							]
						}
					},
					"response": []
				},
				{
					"name": "Search_By_Category_Marble",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "60faeee4-d04b-4862-8dda-e8441907d227",
								"exec": [
									"",
									"pm.test(\"Response status is ok\",function(){",
									"    pm.response.to.have.status(200);",
									"})",
									"pm.test(\"response should be okay to process\", function () { ",
									"    pm.response.to.not.be.error; ",
									"    pm.response.to.not.have.jsonBody(\"error\"); ",
									"    pm.response.to.have.jsonBody();",
									"    ",
									"})",
									"",
									"   var jsonData = JSON.parse(responseBody); ",
									"   console.log(jsonData)",
									"   ",
									"   tests[\"Page  should be 1\"]= jsonData.page   === 1;",
									"   tests[\"First page should display 32 products\"]= jsonData.limit   === 32;",
									"   tests[\"Every Product should have brand\"]= pm.expect(jsonData.items[0]).to.have.property('brand');",
									"   tests[\"Every Product should have price\"]= pm.expect(jsonData.items[0]).to.have.property('price');",
									"   tests[\"Every Product should have rating\"]= pm.expect(jsonData.items[0]).to.have.property('rating');",
									"   tests[\"Every Product should have skuName\"]= pm.expect(jsonData.items[0]).to.have.property('skuName');",
									"   tests[\"Every Product should have skuNumber\"]= pm.expect(jsonData.items[0]).to.have.property('skuNumber');",
									"   tests[\"Every Product should have supplierId\"]= pm.expect(jsonData.items[0]).to.have.property('supplierId');",
									"   tests[\"Category Should be marble for all searched product\"]= jsonData.items[0].categoryId=129;",
									"  var random1= Math.floor(Math.random() * 32);",
									"  var random2= Math.floor(Math.random() * 32);",
									"  var skuNumber1=jsonData.items[random1].skuNumber;",
									"  var skuName1=jsonData.items[random1].skuName;",
									"  var skuNumber2=jsonData.items[random2].skuNumber;",
									"  var sellerId1=jsonData.items[random1].sellerId;",
									"  var price1=jsonData.items[random1].price.price;",
									"    var sellerId2=jsonData.items[random2].sellerId;",
									"  var price2=jsonData.items[random2].price.price;",
									"  var skuName2=jsonData.items[random2].skuName;",
									"   postman.setEnvironmentVariable('skuNumber1', skuNumber1);",
									"    postman.setEnvironmentVariable('skuName1', skuName1);",
									"     postman.setEnvironmentVariable('skuName2', skuName2);",
									"   postman.setEnvironmentVariable('skuNumber2',skuNumber2);",
									"    postman.setEnvironmentVariable('sellerId1',sellerId1);",
									"     postman.setEnvironmentVariable('price1',price1);",
									"      postman.setEnvironmentVariable('sellerId2',sellerId2);",
									"     postman.setEnvironmentVariable('price2',price2);",
									"   ",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "1ba02bc1-4063-4de5-ba8c-dce819f50735",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{token}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"lang\":\"en\",\"userType\":\"buyer\",\"orgIdfier\":\"scg\",\"f\":[{\"field\":\"primaryCategory.o_id\",\"type\":\"category\",\"codes\":[\"129\"]}],\"limit\":32,\"page\":1,\"transformData\":true}"
						},
						"url": {
							"raw": "{{environment}}/buyer-service/search",
							"host": [
								"{{environment}}"
							],
							"path": [
								"buyer-service",
								"search"
							]
						}
					},
					"response": []
				},
				{
					"name": "Search_By_Price-Low To High",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "a2b8f16d-3f9b-4b45-9462-775130744f88",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "b9109c73-9eed-49d1-8cdd-331bd0ca8208",
								"exec": [
									"pm.test(\"Response status is ok\",function(){",
									"    pm.response.to.have.status(200);",
									"})",
									"pm.test(\"response should be okay to process\", function () { ",
									"    pm.response.to.not.be.error; ",
									"    pm.response.to.not.have.jsonBody(\"error\"); ",
									"    pm.response.to.have.jsonBody();",
									"    ",
									"})",
									"",
									"   var jsonData = JSON.parse(responseBody); ",
									"   console.log(jsonData);",
									"   var price1= jsonData.items[0].price.originalPrice;",
									"   var price2= jsonData.items[10].price.originalPrice;",
									"   var price3= jsonData.items[20].price.originalPrice;",
									"   console.log(price1);",
									"   console.log(price2);",
									"   console.log(price3);",
									"   pm.test(\"price shorted Low To High\", function () { ",
									"       if(price3>=price2 && price2>=price1)",
									"        {",
									"            ",
									"            pm.response.to.be.success;",
									"        }",
									"        else",
									"        {",
									"            pm.response.to.not.be.success;",
									"        }",
									"    ",
									"})",
									"   "
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{token}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"lang\":\"en\",\"userType\":\"buyer\",\"orgIdfier\":\"scg\",\"f\":[{\"field\":\"primaryCategory.o_id\",\"type\":\"category\",\"codes\":[\"129\"]},{\"field\":\"stockStatus\",\"operator\":\"eq\",\"codes\":[\"IN_STOCK\",\"COMING_SOON\",\"isMadeToOrder.code\"]}],\"sort\":\"plh\",\"limit\":32,\"page\":1,\"transformData\":true}"
						},
						"url": {
							"raw": "{{environment}}/buyer-service/search",
							"host": [
								"{{environment}}"
							],
							"path": [
								"buyer-service",
								"search"
							]
						}
					},
					"response": []
				},
				{
					"name": "Search_By_Price-High To Low",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "28f3227b-6abe-44a6-8f88-833afc98e2f2",
								"exec": [
									"pm.test(\"Response status is ok\",function(){",
									"    pm.response.to.have.status(200);",
									"})",
									"pm.test(\"response should be okay to process\", function () { ",
									"    pm.response.to.not.be.error; ",
									"    pm.response.to.not.have.jsonBody(\"error\"); ",
									"    pm.response.to.have.jsonBody();",
									"    ",
									"})",
									"",
									"   var jsonData = JSON.parse(responseBody); ",
									"   console.log(jsonData);",
									"   var price1= jsonData.items[0].price.originalPrice;",
									"   var price2= jsonData.items[10].price.originalPrice;",
									"   var price3= jsonData.items[20].price.originalPrice;",
									"   console.log(price1);",
									"   console.log(price2);",
									"   console.log(price3);",
									"   pm.test(\"price shorted High To Low\", function () { ",
									"       if(price1>=price2 && price2>=price3)",
									"        {",
									"            ",
									"            pm.response.to.be.success;",
									"        }",
									"        else",
									"        {",
									"            pm.response.to.not.be.success;",
									"        }",
									"    ",
									"})",
									"   ",
									"   "
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"lang\":\"en\",\"userType\":\"buyer\",\"orgIdfier\":\"scg\",\"f\":[{\"field\":\"primaryCategory.o_id\",\"type\":\"category\",\"codes\":[\"129\"]},{\"field\":\"stockStatus\",\"operator\":\"eq\",\"codes\":[\"IN_STOCK\",\"COMING_SOON\",\"isMadeToOrder.code\"]}],\"sort\":\"phl\",\"limit\":32,\"page\":1,\"transformData\":true}"
						},
						"url": {
							"raw": "{{environment}}/buyer-service/search",
							"host": [
								"{{environment}}"
							],
							"path": [
								"buyer-service",
								"search"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Compare Product",
			"item": [
				{
					"name": "Add_1_Products_To_Compare",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "953658ee-46ec-4204-bda5-b81a45ac9a48",
								"exec": [
									"pm.test(\"Response status is ok\",function(){",
									"    pm.response.to.have.status(200);",
									"})",
									"pm.test(\"response should be okay to process\", function () { ",
									"    pm.response.to.not.be.error; ",
									"    pm.response.to.not.have.jsonBody(\"error\"); ",
									"    pm.response.to.have.jsonBody();",
									"    ",
									"})",
									"",
									"   var jsonData = JSON.parse(responseBody); ",
									"   console.log(jsonData);",
									"   var skuNumber1=postman.getEnvironmentVariable(\"skuNumber1\")",
									"   tests[\"Added Product for comparison contains skuNumber\"+skuNumber1]= jsonData[skuNumber1].skuNumber==skuNumber1"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{environment}}/buyer-service/products-basic-info?lang=en&userType=buyer&orgIdfier=scg&category=Marble-Tile&skuNumber={{skuNumber1}}",
							"host": [
								"{{environment}}"
							],
							"path": [
								"buyer-service",
								"products-basic-info"
							],
							"query": [
								{
									"key": "lang",
									"value": "en"
								},
								{
									"key": "userType",
									"value": "buyer"
								},
								{
									"key": "orgIdfier",
									"value": "scg"
								},
								{
									"key": "category",
									"value": "Marble-Tile"
								},
								{
									"key": "skuNumber",
									"value": "{{skuNumber1}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Add_2_Products_To_Comapre",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "538be773-5bf0-4410-b536-d97203f87d6e",
								"exec": [
									"pm.test(\"Response status is ok\",function(){",
									"    pm.response.to.have.status(200);",
									"})",
									"pm.test(\"response should be okay to process\", function () { ",
									"    pm.response.to.not.be.error; ",
									"    pm.response.to.not.have.jsonBody(\"error\"); ",
									"    pm.response.to.have.jsonBody();",
									"    ",
									"})",
									"  var jsonData = JSON.parse(responseBody); ",
									"  console.log(jsonData)",
									"  var skuNumber1=postman.getEnvironmentVariable(\"skuNumber1\")",
									"  var skuNumber2=postman.getEnvironmentVariable(\"skuNumber2\")",
									"  tests[\"Added Product for comparison contains skuNumber\"+skuNumber1]= jsonData[skuNumber1].skuNumber==skuNumber1",
									"  tests[\"Added Product for comparison contains skuNumber\"+skuNumber2]= jsonData[skuNumber2].skuNumber==skuNumber2"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{token}}",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{environment}}/buyer-service/products-basic-info?lang=en&userType=buyer&orgIdfier=scg&category=Marble-Tile&skuNumber={{skuNumber1}},{{skuNumber2}}",
							"host": [
								"{{environment}}"
							],
							"path": [
								"buyer-service",
								"products-basic-info"
							],
							"query": [
								{
									"key": "lang",
									"value": "en"
								},
								{
									"key": "userType",
									"value": "buyer"
								},
								{
									"key": "orgIdfier",
									"value": "scg"
								},
								{
									"key": "category",
									"value": "Marble-Tile"
								},
								{
									"key": "skuNumber",
									"value": "{{skuNumber1}},{{skuNumber2}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Compare_Product",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "0a4e5cc0-6ff0-44e8-8f22-5ef03f3c922c",
								"exec": [
									"pm.test(\"Response status is ok\",function(){",
									"    pm.response.to.have.status(200);",
									"})",
									"pm.test(\"response should be okay to process\", function () { ",
									"    pm.response.to.not.be.error; ",
									"    pm.response.to.not.have.jsonBody(\"error\"); ",
									"    pm.response.to.have.jsonBody();",
									"    ",
									"})",
									"var jsonData = JSON.parse(responseBody); ",
									"  console.log(jsonData)",
									"    var skuNumber1=postman.getEnvironmentVariable(\"skuNumber1\")",
									"  var skuNumber2=postman.getEnvironmentVariable(\"skuNumber2\")",
									"  tests[\"Added Product for comparison contains skuNumber\"+skuNumber1]= jsonData[skuNumber1].skuNumber==skuNumber1",
									"  tests[\"Added Product for comparison contains skuNumber\"+skuNumber2]= jsonData[skuNumber2].skuNumber==skuNumber2",
									"  tests[\"Compared Attribute Length is equla to 36 \"]=jsonData.comparableAttributes.length==36"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{environment}}/buyer-service/product-comparison-details?lang=en&userType=buyer&orgIdfier=scg&category=Marble-Tile&skuNumbers={{skuNumber1}},{{skuNumber2}}&skuNumber={{skuNumber1}},{{skuNumber2}}",
							"host": [
								"{{environment}}"
							],
							"path": [
								"buyer-service",
								"product-comparison-details"
							],
							"query": [
								{
									"key": "lang",
									"value": "en"
								},
								{
									"key": "userType",
									"value": "buyer"
								},
								{
									"key": "orgIdfier",
									"value": "scg"
								},
								{
									"key": "category",
									"value": "Marble-Tile"
								},
								{
									"key": "skuNumbers",
									"value": "{{skuNumber1}},{{skuNumber2}}"
								},
								{
									"key": "skuNumber",
									"value": "{{skuNumber1}},{{skuNumber2}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Remove_1_Item_From_Compare",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "205cab51-a375-484a-821f-f47caa2b81f0",
								"exec": [
									"pm.test(\"Response status is ok\",function(){",
									"    pm.response.to.have.status(200);",
									"})",
									"pm.test(\"response should be okay to process\", function () { ",
									"    pm.response.to.not.be.error; ",
									"    pm.response.to.not.have.jsonBody(\"error\"); ",
									"    pm.response.to.have.jsonBody();",
									"    ",
									"})",
									"var jsonData = JSON.parse(responseBody); ",
									"   console.log(jsonData);",
									"   var skuNumber1=postman.getEnvironmentVariable(\"skuNumber1\")",
									"   var skuNumber2=postman.getEnvironmentVariable(\"skuNumber2\")",
									"   tests[\"Removed SkuNumber is\"+skuNumber2]= jsonData[skuNumber1].skuNumber!=skuNumber2"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{environment}}/buyer-service/products-basic-info?lang=en&userType=buyer&orgIdfier=scg&category=Marble-Tile&skuNumbers={{skuNumber1}},{{skuNumber2}}&skuNumber={{skuNumber1}}",
							"host": [
								"{{environment}}"
							],
							"path": [
								"buyer-service",
								"products-basic-info"
							],
							"query": [
								{
									"key": "lang",
									"value": "en"
								},
								{
									"key": "userType",
									"value": "buyer"
								},
								{
									"key": "orgIdfier",
									"value": "scg"
								},
								{
									"key": "category",
									"value": "Marble-Tile"
								},
								{
									"key": "skuNumbers",
									"value": "{{skuNumber1}},{{skuNumber2}}"
								},
								{
									"key": "skuNumber",
									"value": "{{skuNumber1}}"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Quick View",
			"item": [
				{
					"name": "product_overview",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "77d977d6-869e-4b8b-b1e5-fb1738d05a50",
								"exec": [
									"pm.test(\"Response status is ok\",function(){",
									"    pm.response.to.have.status(200);",
									"})",
									"pm.test(\"response should be okay to process\", function () { ",
									"    pm.response.to.not.be.error; ",
									"    pm.response.to.not.have.jsonBody(\"error\"); ",
									"    pm.response.to.have.jsonBody();",
									"    ",
									"})",
									"",
									"   var jsonData = JSON.parse(responseBody); ",
									"   console.log(jsonData);",
									"   var skuNumber2=pm.environment.get('skuNumber2');",
									"   var skuName2=pm.environment.get('skuName2');",
									"   pm.test(\"skuNumber \\t\"+skuNumber2 + \"\\tand skuName\\t \"+skuName2+\"\\t are contains in overview \",function(){",
									"     // console.log(jsonData.brand);",
									"      pm.expect(skuNumber2).to.equal(jsonData.skuNumber);",
									"      pm.expect(skuName2).to.equal(jsonData.skuName);",
									"     ",
									"   })",
									"   ",
									"   tests[\"Product Overview have Property  brand\"]= pm.expect(jsonData).to.have.property('brand');",
									"   tests[\"Product Overview have Property  imgGallery\"]= pm.expect(jsonData).to.have.property('imgGallery');",
									"   tests[\"Product Overview have Property  otherDetails\"]= pm.expect(jsonData).to.have.property('otherDetails');",
									"   tests[\"Product Overview have Property  price\"]= pm.expect(jsonData).to.have.property('price');",
									"   tests[\"Product Overview have Property  rating\"]= pm.expect(jsonData).to.have.property('rating');",
									"   tests[\"Product Overview have Property  tabs\"]= pm.expect(jsonData).to.have.property('tabs');",
									"   tests[\"Product Overview have Property  variantYN\"]= pm.expect(jsonData).to.have.property('variantYN');",
									"   tests[\"Product Overview have Property  supplierId\"]= pm.expect(jsonData).to.have.property('supplierId');",
									"   tests[\"Product Overview have Property  sellerName\"]= pm.expect(jsonData).to.have.property('sellerName');",
									"   tests[\"Product Overview have Property  taxInvoiceAvailable\"]= pm.expect(jsonData).to.have.property('taxInvoiceAvailable');",
									"   tests[\"Product Overview have Property  inStock\"]= pm.expect(jsonData).to.have.property('inStock');",
									"   tests[\"Product Overview have Property  freeSampleEnabled\"]= pm.expect(jsonData).to.have.property('freeSampleEnabled');",
									"   tests[\"Product Overview have Property  customMade\"]= pm.expect(jsonData).to.have.property('customMade');",
									"   tests[\"Product Overview have Property  comingSoon\"]= pm.expect(jsonData).to.have.property('comingSoon');",
									"   tests[\"Product Overview have Property  categoryId\"]= pm.expect(jsonData).to.have.property('categoryId');",
									"   tests[\"Product Overview have Property  installationSupport\"]= pm.expect(jsonData).to.have.property('installationSupport');",
									"   tests[\"Product Overview have Property  desc\"]= pm.expect(jsonData).to.have.property('desc');",
									"   tests[\"Product Overview have Property  image\"]= pm.expect(jsonData).to.have.property('image');",
									"   tests[\"Product Overview have Property  name\"]= pm.expect(jsonData).to.have.property('name');",
									" "
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{environment}}/buyer-service/product-overview?lang=en&userType=buyer&orgIdfier=scg&category=Marble-Tile&skuNumber={{skuNumber2}}",
							"host": [
								"{{environment}}"
							],
							"path": [
								"buyer-service",
								"product-overview"
							],
							"query": [
								{
									"key": "lang",
									"value": "en"
								},
								{
									"key": "userType",
									"value": "buyer"
								},
								{
									"key": "orgIdfier",
									"value": "scg"
								},
								{
									"key": "category",
									"value": "Marble-Tile"
								},
								{
									"key": "skuNumber",
									"value": "{{skuNumber2}}"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "PDP ",
			"item": [
				{
					"name": "Product_Details",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d549875d-dcf5-48e6-b90b-4b64908da5a3",
								"exec": [
									"pm.test(\"Response status is ok\",function(){",
									"    pm.response.to.have.status(200);",
									"})",
									"pm.test(\"response should be okay to process\", function () { ",
									"    pm.response.to.not.be.error; ",
									"    pm.response.to.not.have.jsonBody(\"error\"); ",
									"    pm.response.to.have.jsonBody();",
									"    ",
									"})",
									"",
									"   var jsonData = JSON.parse(responseBody); ",
									"   console.log(jsonData);",
									"   var skuNumber1=pm.environment.get('skuNumber1');",
									"   var skuName1=pm.environment.get('skuName1');",
									"   pm.test(\"skuNumber \\t\"+skuNumber1 + \"\\tand skuName\\t \"+skuName1+\"\\t are contains in response \",function(){",
									"     // console.log(jsonData.brand);",
									"      pm.expect(skuNumber1).to.equal(jsonData.skuNumber);",
									"      pm.expect(skuName1).to.equal(jsonData.skuName);",
									"     ",
									"   })",
									"   tests[\"PDP page have Property  brand\"]= pm.expect(jsonData).to.have.property('brand');",
									"   tests[\"PDP page have Property  imgGallery\"]= pm.expect(jsonData).to.have.property('imgGallery');",
									"   tests[\"PDP page have Property  otherDetails\"]= pm.expect(jsonData).to.have.property('otherDetails');",
									"   tests[\"PDP page have Property  price\"]= pm.expect(jsonData).to.have.property('price');",
									"   tests[\"PDP page have Property  productDimensions\"]= pm.expect(jsonData).to.have.property('productDimensions');",
									"   tests[\"PDP page have Property  tabs\"]= pm.expect(jsonData).to.have.property('tabs');",
									"   tests[\"PDP page have Property  variants\"]= pm.expect(jsonData).to.have.property('variants');",
									"   tests[\"PDP page have Property  supplierId\"]= pm.expect(jsonData).to.have.property('supplierId');",
									"   tests[\"PDP page have Property  sellerName\"]= pm.expect(jsonData).to.have.property('sellerName');",
									"   tests[\"PDP page have Property  taxInvoiceAvailable\"]= pm.expect(jsonData).to.have.property('taxInvoiceAvailable');",
									"   tests[\"PDP page have Property  inStock\"]= pm.expect(jsonData).to.have.property('inStock');",
									"   tests[\"PDP page have Property  freeSampleEnabled\"]= pm.expect(jsonData).to.have.property('freeSampleEnabled');",
									"   tests[\"PDP page have Property  customMade\"]= pm.expect(jsonData).to.have.property('customMade');",
									"   tests[\"PDP page have Property  comingSoon\"]= pm.expect(jsonData).to.have.property('comingSoon');",
									"   tests[\"PDP page have Property  categoryId\"]= pm.expect(jsonData).to.have.property('categoryId');",
									"   tests[\"PDP page have Property  installationSupport\"]= pm.expect(jsonData).to.have.property('installationSupport');",
									"   tests[\"PDP page have Property  desc\"]= pm.expect(jsonData).to.have.property('desc');",
									"   tests[\"PDP page have Property  image\"]= pm.expect(jsonData).to.have.property('image');",
									"   tests[\"Product Overview have Property  name\"]= pm.expect(jsonData).to.have.property('name');",
									" "
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{environment}}/buyer-service/product-details?lang=en&userType=buyer&orgIdfier=scg&nameIdfier={{skuName1}}&skuNumber={{skuNumber1}}",
							"host": [
								"{{environment}}"
							],
							"path": [
								"buyer-service",
								"product-details"
							],
							"query": [
								{
									"key": "lang",
									"value": "en"
								},
								{
									"key": "userType",
									"value": "buyer"
								},
								{
									"key": "orgIdfier",
									"value": "scg"
								},
								{
									"key": "nameIdfier",
									"value": "{{skuName1}}"
								},
								{
									"key": "skuNumber",
									"value": "{{skuNumber1}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Required_Accessories",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6a30510f-1cca-48c3-8f24-871bb254f482",
								"exec": [
									"pm.test(\"Response status is ok\",function(){",
									"    pm.response.to.have.status(200);",
									"})",
									"pm.test(\"response should be okay to process\", function () { ",
									"    pm.response.to.not.be.error; ",
									"    pm.response.to.not.have.jsonBody(\"error\"); ",
									"    pm.response.to.have.jsonBody();",
									"    ",
									"})",
									"",
									"   var jsonData = JSON.parse(responseBody); ",
									"   console.log(jsonData);",
									"",
									"   pm.test(\"limit count,pages and totalItems are expected \",function(){",
									"     // console.log(jsonData.brand);",
									"      pm.expect(jsonData.limit).to.equal(50);",
									"      pm.expect(jsonData.page).to.equal(1);",
									"      pm.expect(jsonData.totalItems).to.equal(4);",
									"     ",
									"   })",
									"   ",
									"   tests[\"Required Accessories have Property  brand\"]= pm.expect(jsonData.items[0]).to.have.property('brand');",
									"   tests[\"Required Accessories have Property  price\"]= pm.expect(jsonData.items[0]).to.have.property('price');",
									"   tests[\"Required Accessories have Property  rating\"]= pm.expect(jsonData.items[0]).to.have.property('rating');",
									"   tests[\"Required Accessories have Property  supplierId\"]= pm.expect(jsonData.items[0]).to.have.property('supplierId');",
									"   tests[\"Required Accessories have Property  sellerName\"]= pm.expect(jsonData.items[0]).to.have.property('sellerName');",
									"   tests[\"Required Accessories have Property  taxInvoiceAvailable\"]= pm.expect(jsonData.items[0]).to.have.property('taxInvoiceAvailable');",
									"   tests[\"Required Accessories have Property  inStock\"]= pm.expect(jsonData.items[0]).to.have.property('inStock');",
									"   tests[\"Required Accessories have Property  freeSampleEnabled\"]= pm.expect(jsonData.items[0]).to.have.property('freeSampleEnabled');",
									"   tests[\"Required Accessories have Property  customMade\"]= pm.expect(jsonData.items[0]).to.have.property('customMade');",
									"   tests[\"Required Accessories have Property  comingSoon\"]= pm.expect(jsonData.items[0]).to.have.property('comingSoon');",
									"   tests[\"Required Accessories have Property  categoryId\"]= pm.expect(jsonData.items[0]).to.have.property('categoryId');",
									"   tests[\"Required Accessories have Property  installationSupport\"]= pm.expect(jsonData.items[0]).to.have.property('installationSupport');",
									"   tests[\"Required Accessories have Property  desc\"]= pm.expect(jsonData.items[0]).to.have.property('desc');",
									"   tests[\"Required Accessories have Property  image\"]= pm.expect(jsonData.items[0]).to.have.property('image');",
									" "
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{environment}}/buyer-service/required-accessories?lang=en&userType=buyer&orgIdfier=scg&nameIdfier={{skuName1}}&skuNumber={{skuNumber1}}",
							"host": [
								"{{environment}}"
							],
							"path": [
								"buyer-service",
								"required-accessories"
							],
							"query": [
								{
									"key": "lang",
									"value": "en"
								},
								{
									"key": "userType",
									"value": "buyer"
								},
								{
									"key": "orgIdfier",
									"value": "scg"
								},
								{
									"key": "nameIdfier",
									"value": "{{skuName1}}"
								},
								{
									"key": "skuNumber",
									"value": "{{skuNumber1}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "CoverageArea_Calculator",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "53f127ec-cc53-4033-8b63-b5d5a8e31b71",
								"exec": [
									"pm.test(\"Response status is ok\",function(){",
									"    pm.response.to.have.status(200);",
									"})",
									"pm.test(\"response should be okay to process\", function () { ",
									"    pm.response.to.not.be.error; ",
									"    pm.response.to.not.have.jsonBody(\"error\"); ",
									"    pm.response.to.have.jsonBody();",
									"    ",
									"})",
									"",
									"   var jsonData = JSON.parse(responseBody); ",
									"   console.log(jsonData);",
									"   tests[\"Coverage area have property units \"]=pm.expect(jsonData).to.have.property('units');",
									"   tests[\"Coverage area have property unitsType\"]=pm.expect(jsonData).to.have.property('unitsType');",
									"   tests[\"Coverage area have property originalUnits\"]=pm.expect(jsonData).to.have.property('originalUnits');",
									"   "
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{environment}}/buyer-service/qty-coveragearea?lang=en&userType=buyer&orgIdfier=scg&nameIdfier={{skuName1}}&skuNumber={{skuNumber1}}&area=1000&percWastage=10",
							"host": [
								"{{environment}}"
							],
							"path": [
								"buyer-service",
								"qty-coveragearea"
							],
							"query": [
								{
									"key": "lang",
									"value": "en"
								},
								{
									"key": "userType",
									"value": "buyer"
								},
								{
									"key": "orgIdfier",
									"value": "scg"
								},
								{
									"key": "nameIdfier",
									"value": "{{skuName1}}"
								},
								{
									"key": "skuNumber",
									"value": "{{skuNumber1}}"
								},
								{
									"key": "area",
									"value": "1000"
								},
								{
									"key": "percWastage",
									"value": "10"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Share_Product",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "fc839b5f-1972-4485-9800-82ea58e3d611",
								"exec": [
									"pm.test(\"Response status is ok\",function(){",
									"    pm.response.to.have.status(200);",
									"})",
									"pm.test(\"response should be okay to process\", function () { ",
									"    pm.response.to.not.be.error; ",
									"    pm.response.to.not.have.jsonBody(\"error\"); ",
									"    pm.response.to.have.jsonBody();",
									"    ",
									"})",
									"",
									"   var jsonData = JSON.parse(responseBody); ",
									"   console.log(jsonData);",
									"   var url=jsonData.url",
									"   console.log(url);",
									"   tests[\"Shared Url is valid\"]=pm.expect(url).to.equal(pm.environment.get('environment') + \"/en/p/\" +pm.environment.get('skuName1') + \"/\"+pm.environment.get('skuNumber1')+\"?su=-1\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{environment}}/buyer-service/share-product?lang=en&userType=buyer&orgIdfier=scg&nameIdfier={{skuName1}}&skuNumber={{skuNumber1}}&url={{environment}}/en/p/{{skuName1}}/{{skuNumber1}}",
							"host": [
								"{{environment}}"
							],
							"path": [
								"buyer-service",
								"share-product"
							],
							"query": [
								{
									"key": "lang",
									"value": "en"
								},
								{
									"key": "userType",
									"value": "buyer"
								},
								{
									"key": "orgIdfier",
									"value": "scg"
								},
								{
									"key": "nameIdfier",
									"value": "{{skuName1}}"
								},
								{
									"key": "skuNumber",
									"value": "{{skuNumber1}}"
								},
								{
									"key": "url",
									"value": "{{environment}}/en/p/{{skuName1}}/{{skuNumber1}}"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Cart Operations",
			"item": [
				{
					"name": "Add_To_Cart",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ebb7d8d7-6434-421c-b61e-1e92567b617d",
								"exec": [
									"pm.test(\"Response status is ok\",function(){",
									"    pm.response.to.have.status(200);",
									"})",
									"pm.test(\"response should be okay to process\", function () { ",
									"    pm.response.to.not.be.error; ",
									"    pm.response.to.not.have.jsonBody(\"error\"); ",
									"    pm.response.to.have.jsonBody();",
									"    ",
									"})",
									"",
									"   var jsonData = JSON.parse(responseBody); ",
									"   console.log(jsonData);",
									"  var sellerid=jsonData[0].sellerId",
									"  console.log(sellerid)",
									"   ",
									"   tests[\"cart product have Property  bulkPrice\"]= pm.expect(jsonData[0]).to.have.property('bulkPrice');",
									"   tests[\"cart product have Property  bulkQuantity\"]= pm.expect(jsonData[0]).to.have.property('bulkQuantity');",
									"   tests[\"cart product have Property  cartIdfier\"]= pm.expect(jsonData[0]).to.have.property('cartIdfier');",
									"   tests[\"cart product have Property  categoryId\"]= pm.expect(jsonData[0]).to.have.property('categoryId');",
									"   tests[\"cart product have Property  comingSoon\"]= pm.expect(jsonData[0]).to.have.property('comingSoon');",
									"   tests[\"cart product have Property  dimensionUnit\"]= pm.expect(jsonData[0]).to.have.property('dimensionUnit');",
									"   tests[\"cart product have Property  quantity\"]= pm.expect(jsonData[0]).to.have.property('quantity');",
									"    tests[\"cart product have Property  inStock\"]= pm.expect(jsonData[0]).to.have.property('inStock');",
									"   tests[\"cart product have Property  itemTotalPrice\"]= pm.expect(jsonData[0]).to.have.property('itemTotalPrice');",
									"   tests[\"cart product have Property  name\"]= pm.expect(jsonData[0]).to.have.property('name')",
									"     tests[\"cart product have Property  skuNumber=\"]= pm.expect(jsonData[0].skuNumber).to.equal(pm.environment.get('skuNumber1'));",
									"     tests[\"cart product have Property  Price=\"]= pm.expect(pm.environment.get('price1')).to.equal('' + jsonData[0].price +'');",
									"      tests[\"cart product have Property  sellerId=\"]= pm.expect(pm.environment.get('sellerId1')).to.equal('' + jsonData[0].sellerId +'');",
									"  tests[\"cart product have Property  quantity=\"]= pm.expect(jsonData[0].quantity).to.equal(1);",
									"  tests[\"cart product have Property  installationRequired=\"]= pm.expect(jsonData[0].installationRequired).to.equal(false);",
									"  tests[\"cart product have Property  sampleItem=\"]= pm.expect(jsonData[0].sampleItem).to.equal(false);",
									"  "
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "4625fef0-22ef-4ebf-873d-9d8778e20af5",
								"exec": [
									"var timeInSeconds = parseInt((new Date()).getTime() / 1000);",
									"postman.setEnvironmentVariable('timeInSeconds',timeInSeconds);",
									"console.log(timeInSeconds);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"lang\":\"en\",\"userType\":\"buyer\",\"orgIdfier\":\"scg\",\"cartItems\":[{\"cartIdfier\":\"{{timeInSeconds}}-1696B193852\",\"skuNumber\":\"{{skuNumber1}}\",\"sellerId\":{{sellerId1}},\"quantity\":1,\"installationRequired\":false,\"sampleItem\":false,\"installationType\":\"\",\"price\":{{price1}},\"sequence\":{{timeInSeconds}}}]}"
						},
						"url": {
							"raw": "{{environment}}/order-service/cart-products",
							"host": [
								"{{environment}}"
							],
							"path": [
								"order-service",
								"cart-products"
							]
						}
					},
					"response": []
				},
				{
					"name": "Cart_Price",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "7cae4903-2844-400d-823e-3a228a150b51",
								"exec": [
									"pm.test(\"Response status is ok\",function(){",
									"    pm.response.to.have.status(200);",
									"})",
									"pm.test(\"response should be okay to process\", function () { ",
									"    pm.response.to.not.be.error; ",
									"    pm.response.to.not.have.jsonBody(\"error\"); ",
									"    pm.response.to.have.jsonBody();",
									"    ",
									"})",
									"",
									"   var jsonData = JSON.parse(responseBody); ",
									"   console.log(jsonData);",
									"   tests[\"Cart Price of added itesm is equal\"]=pm.expect(pm.environment.get('price1')).to.equal('' + jsonData.basePrice +'');"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"lang\":\"en\",\"userType\":\"buyer\",\"orgIdfier\":\"scg\",\"cartId\":\"1552899049213-1696B193852\",\"requestId\":\"1698FFEFA72-1696B193852-1552908744230\",\"destinationZipCode\":\"\",\"couponCode\":\"\",\"cartItems\":[{\"cartIdfier\":\"1552899049213-1696B193852\",\"skuNumber\":\"{{skuNumber1}}\",\"sellerId\":{{sellerId1}},\"quantity\":1,\"installationRequired\":false,\"sampleItem\":false,\"installationType\":\"\",\"price\":{{price1}},\"sequence\":1552908737316,\"removed\":false}]}"
						},
						"url": {
							"raw": "{{environment}}/order-service/cart-price",
							"host": [
								"{{environment}}"
							],
							"path": [
								"order-service",
								"cart-price"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete_Cart_Item",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "49499b4c-82ce-4c9d-8885-2712dc77abef",
								"exec": [
									"pm.test(\"Response status is ok\",function(){",
									"    pm.response.to.have.status(200);",
									"})",
									"pm.test(\"response should be okay to process\", function () { ",
									"    pm.response.to.not.be.error; ",
									"    pm.response.to.not.have.jsonBody(\"error\"); ",
									"    pm.response.to.have.jsonBody();",
									"    ",
									"})",
									"",
									"   var jsonData = JSON.parse(responseBody); ",
									"   console.log(jsonData);",
									"   tests[\"Cart Price is Zero\"]=pm.expect(jsonData.basePrice).to.equal(0);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{token}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"lang\":\"en\",\"userType\":\"buyer\",\"orgIdfier\":\"scg\",\"cartId\":\"1552899049213-1696B193852\",\"requestId\":\"1699459D984-1696B193852-1552973949428\",\"destinationZipCode\":\"\",\"couponCode\":\"\",\"cartItems\":[]}"
						},
						"url": {
							"raw": "{{environment}}/order-service/cart-price",
							"host": [
								"{{environment}}"
							],
							"path": [
								"order-service",
								"cart-price"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add_To_Cart2",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e0779686-2195-4098-8994-e4267119e3bc",
								"exec": [
									"pm.test(\"Response status is ok\",function(){",
									"    pm.response.to.have.status(200);",
									"})",
									"pm.test(\"response should be okay to process\", function () { ",
									"    pm.response.to.not.be.error; ",
									"    pm.response.to.not.have.jsonBody(\"error\"); ",
									"    pm.response.to.have.jsonBody();",
									"    ",
									"})",
									"",
									"   var jsonData = JSON.parse(responseBody); ",
									"   postman.setEnvironmentVariable('jsonData',JSON.stringify(jsonData))",
									"    var jsonArray = pm.response.json();",
									"    console.log(jsonArray);",
									"      postman.setEnvironmentVariable('jsonArray',jsonArray)",
									"   console.log(jsonData);",
									"  var sellerid=jsonData[0].sellerId",
									"  console.log(sellerid)",
									"   ",
									"   tests[\"cart product have Property  bulkPrice\"]= pm.expect(jsonData[0]).to.have.property('bulkPrice');",
									"   tests[\"cart product have Property  bulkQuantity\"]= pm.expect(jsonData[0]).to.have.property('bulkQuantity');",
									"   tests[\"cart product have Property  cartIdfier\"]= pm.expect(jsonData[0]).to.have.property('cartIdfier');",
									"   tests[\"cart product have Property  categoryId\"]= pm.expect(jsonData[0]).to.have.property('categoryId');",
									"   tests[\"cart product have Property  comingSoon\"]= pm.expect(jsonData[0]).to.have.property('comingSoon');",
									"   tests[\"cart product have Property  dimensionUnit\"]= pm.expect(jsonData[0]).to.have.property('dimensionUnit');",
									"   tests[\"cart product have Property  quantity\"]= pm.expect(jsonData[0]).to.have.property('quantity');",
									"    tests[\"cart product have Property  inStock\"]= pm.expect(jsonData[0]).to.have.property('inStock');",
									"   tests[\"cart product have Property  itemTotalPrice\"]= pm.expect(jsonData[0]).to.have.property('itemTotalPrice');",
									"   tests[\"cart product have Property  name\"]= pm.expect(jsonData[0]).to.have.property('name')",
									"     tests[\"cart product have Property  skuNumber=\"]= pm.expect(jsonData[0].skuNumber).to.equal(pm.environment.get('skuNumber2'));",
									"     tests[\"cart product have Property  Price=\"]= pm.expect(pm.environment.get('price2')).to.equal('' + jsonData[0].price +'');",
									"      tests[\"cart product have Property  sellerId=\"]= pm.expect(pm.environment.get('sellerId2')).to.equal('' + jsonData[0].sellerId +'');",
									"  tests[\"cart product have Property  quantity=\"]= pm.expect(jsonData[0].quantity).to.equal(1);",
									"  tests[\"cart product have Property  installationRequired=\"]= pm.expect(jsonData[0].installationRequired).to.equal(false);",
									"  tests[\"cart product have Property  sampleItem=\"]= pm.expect(jsonData[0].sampleItem).to.equal(false);",
									"  "
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "6d408bb7-ff5c-4290-a0fb-44cc991e5e64",
								"exec": [
									"var timeInSeconds2 = parseInt((new Date()).getTime() / 1000);",
									"postman.setEnvironmentVariable('timeInSeconds2',timeInSeconds2);",
									"console.log(timeInSeconds2);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"lang\":\"en\",\"userType\":\"buyer\",\"orgIdfier\":\"scg\",\"cartItems\":[{\"cartIdfier\":\"{{timeInSeconds2}}-1696B193852\",\"skuNumber\":\"{{skuNumber2}}\",\"sellerId\":{{sellerId2}},\"quantity\":1,\"installationRequired\":false,\"sampleItem\":false,\"installationType\":\"\",\"price\":{{price2}},\"sequence\":{{timeInSeconds2}}}]}"
						},
						"url": {
							"raw": "{{environment}}/order-service/cart-products",
							"host": [
								"{{environment}}"
							],
							"path": [
								"order-service",
								"cart-products"
							]
						}
					},
					"response": []
				},
				{
					"name": "Cart_Price2",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "df70b988-358d-4b15-8b8a-60508d1b83f9",
								"exec": [
									"pm.test(\"Response status is ok\",function(){",
									"    pm.response.to.have.status(200);",
									"})",
									"pm.test(\"response should be okay to process\", function () { ",
									"    pm.response.to.not.be.error; ",
									"    pm.response.to.not.have.jsonBody(\"error\"); ",
									"    pm.response.to.have.jsonBody();",
									"    ",
									"})",
									"",
									"   var jsonData = JSON.parse(responseBody); ",
									"   console.log(jsonData);",
									"    tests[\"Cart Price of added itesm is equal\"]=pm.expect(pm.environment.get('price2')).to.equal('' + jsonData.basePrice +'');"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"lang\":\"en\",\"userType\":\"buyer\",\"orgIdfier\":\"scg\",\"cartId\":\"{{timeInSeconds2}}-1696B193852\",\"requestId\":\"1698FFEFA72-1696B193852-{{timeInSeconds2}}\",\"destinationZipCode\":\"\",\"couponCode\":\"\",\"cartItems\":[{\"cartIdfier\":\"{{timeInSeconds2}}-1696B193852\",\"skuNumber\":\"{{skuNumber2}}\",\"sellerId\":{{sellerId2}},\"quantity\":1,\"installationRequired\":false,\"sampleItem\":false,\"installationType\":\"\",\"price\":{{price2}},\"sequence\":{{timeInSeconds2}},\"removed\":false}]}"
						},
						"url": {
							"raw": "{{environment}}/order-service/cart-price",
							"host": [
								"{{environment}}"
							],
							"path": [
								"order-service",
								"cart-price"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Authentication",
			"item": [
				{
					"name": "User_Check",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e38ecefc-e43b-44cf-a07f-d4b3c69983bc",
								"exec": [
									"pm.test(\"Response status is ok\",function(){",
									"    pm.response.to.have.status(200);",
									"})",
									"pm.test(\"response should be okay to process\", function () { ",
									"    pm.response.to.not.be.error; ",
									"    pm.response.to.have.jsonBody(\"error\"); ",
									"    pm.response.to.have.jsonBody();",
									"    ",
									"})",
									"",
									"   var jsonData = JSON.parse(responseBody); ",
									"   console.log(jsonData);",
									"   tests[\"Authentication Service  have Property orgIdfier \"]= pm.expect(jsonData).to.have.property('orgIdfier');",
									"   tests[\"Authentication Service  have Property userId\"]= pm.expect(jsonData).to.have.property('userId');",
									"   tests[\"Authentication Service  have Property idpUserIdentifier\"]= pm.expect(jsonData).to.have.property('idpUserIdentifier');",
									"   tests[\"Authentication Service  have Property phoneNo\"]= pm.expect(jsonData).to.have.property('phoneNo');",
									"   tests[\"Authentication Service  have Property fullName\"]= pm.expect(jsonData).to.have.property('fullName');",
									"   tests[\"Authentication Service  have Property resetToken\"]= pm.expect(jsonData).to.have.property('resetToken');",
									"    tests[\"useremail in Authentication Service is =\"+pm.environment.get('email')]=pm.expect(pm.environment.get('email')).to.equal( jsonData.useremail);",
									"    tests[\"userType in Authentication Service is = buyer\"]=pm.expect('buyer').to.equal( jsonData.userType);",
									"    tests[\"idpProvider in Authentication Service is = auth0\"]=pm.expect('auth0').to.equal( jsonData.idpProvider);",
									"   "
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{environment}}/authentication-service/user/email?lang=en&userType=buyer&orgIdfier=scg&email={{email}}",
							"host": [
								"{{environment}}"
							],
							"path": [
								"authentication-service",
								"user",
								"email"
							],
							"query": [
								{
									"key": "lang",
									"value": "en"
								},
								{
									"key": "userType",
									"value": "buyer"
								},
								{
									"key": "orgIdfier",
									"value": "scg"
								},
								{
									"key": "email",
									"value": "{{email}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "96e8f329-ae80-4ce2-b4e8-c61fa76dae5d",
								"exec": [
									"pm.test(\"Response status is ok\",function(){",
									"    pm.response.to.have.status(200);",
									"})",
									"pm.test(\"response should be okay to process\", function () { ",
									"    pm.response.to.not.be.error; ",
									"    pm.response.to.have.jsonBody(\"error\"); ",
									"    pm.response.to.have.jsonBody();",
									"    ",
									"})",
									"",
									"   var jsonData = JSON.parse(responseBody); ",
									"   console.log(jsonData)",
									"   tests[\"Loged in  user  have Property accessToken\"]= pm.expect(jsonData).to.have.property('accessToken');",
									"   var accessToken=jsonData.accessToken",
									"   postman.setEnvironmentVariable('accessToken',accessToken);",
									"   tests[\"Loged in  User have Property phoneNo \"]= pm.expect(jsonData).to.have.property('phoneNo');",
									"   tests[\"Loged in User  have Property fullName\"]= pm.expect(jsonData).to.have.property('fullName');",
									"     tests[\"Loged in User  have Property preferredLanguage \"]= pm.expect(jsonData).to.have.property('preferredLanguage');",
									"   tests[\"Loged in  user  have Property userId\"]= pm.expect(jsonData).to.have.property('userId');",
									"    var userId=jsonData.userId",
									"   postman.setEnvironmentVariable('userId',userId);",
									"   ",
									"      ",
									"      "
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"lang\":\"en\",\"userType\":\"buyer\",\"orgIdfier\":\"scg\",\"fullName\":\"\",\"phoneNo\":\"\",\"useremail\":\"{{email}}\",\"password\":\"{{Password}}\",\"preferredLanguage\":\"en\"}"
						},
						"url": {
							"raw": "{{environment}}/api/auth/login",
							"host": [
								"{{environment}}"
							],
							"path": [
								"api",
								"auth",
								"login"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Checkout",
			"item": [
				{
					"name": "Delete_Cart_If_Exist",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "2120403d-a723-42be-b4c6-3b8d03f379af",
								"exec": [
									"pm.test(\"Response status is ok\",function(){",
									"    pm.response.to.have.status(200);",
									"})",
									"pm.test(\"response should be okay to process\", function () { ",
									"    pm.response.to.not.be.error; ",
									"    pm.response.to.not.have.jsonBody(\"error\"); ",
									"    pm.response.to.have.jsonBody();",
									"    ",
									"})",
									"",
									"   var jsonData = JSON.parse(responseBody); ",
									"   console.log(jsonData);",
									"   if(jsonData.length<1)",
									"   {",
									"       tests[\"Cart having no data hence merging carts\"]=jsonData.length<1",
									"       postman.setNextRequest(\"Merge_Carts\");",
									"   }",
									"   else",
									"   {",
									"       var token=pm.environment.get('accessToken')",
									"       console.log(token)",
									"       var env=pm.environment.get('environment')",
									"       var user=pm.environment.get('userId')",
									"       tests[\"Cart having previous data hence deleting cartitems\"]=jsonData.length>=1",
									"       ",
									"       for(i=0;i<jsonData.length;i++)",
									"       {",
									"         ",
									"           postman.setEnvironmentVariable('cartitemskuNumber',(jsonData[i].skuNumber))",
									"           const echoPostRequest = {",
									"           url:env+'/order-service/carts?lang=en&userType=buyer&orgIdfier=scg&userId='+user+'&skuNumber='+jsonData[i].skuNumber+'',",
									"           method: 'DELETE',",
									"           header: 'Authorization:Bearer'+\" \"+ token+''",
									"           ",
									"};",
									"pm.sendRequest(echoPostRequest, function (err, res) {",
									"  console.log(err ? err : res.json());",
									"});",
									"           ",
									"       }",
									"       ",
									"       }"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"lang\":\"en\",\"userType\":\"buyer\",\"orgIdfier\":\"scg\",\"userId\":{{userId}}}"
						},
						"url": {
							"raw": "{{environment}}/order-service/cart-products",
							"host": [
								"{{environment}}"
							],
							"path": [
								"order-service",
								"cart-products"
							]
						}
					},
					"response": []
				},
				{
					"name": "Merge_Carts",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5aa9e02c-c865-4ab3-9c3b-87a6f059423e",
								"exec": [
									"pm.test(\"Response status is ok\",function(){",
									"    pm.response.to.have.status(200);",
									"})",
									"pm.test(\"response should be okay to process\", function () { ",
									"    pm.response.to.not.be.error; ",
									"    pm.response.to.not.have.jsonBody(\"error\"); ",
									"    pm.response.to.have.jsonBody();",
									"    ",
									"})",
									"",
									"   var jsonData = JSON.parse(responseBody); ",
									"   console.log(jsonData);",
									"  ",
									"     ",
									"        tests[\"Cart Data in Merged item  =1\"]=pm.expect(jsonData.cartData.length).to.equal( 1);",
									"        tests[\"Cart Items in Merged item  =1\"]=pm.expect(jsonData.cartItems.length).to.equal(1);",
									"      tests[\"Merged Cart having Sku with skuName=\"+pm.environment.get('skuName2')]=pm.expect(jsonData.cartData[0].skuName).to.equal(pm.environment.get('skuName2'));",
									"       tests[\"Merged Cart having Sku with skuNumber=\"+pm.environment.get('skuNumber2')]=pm.expect(jsonData.cartData[0].skuNumber).to.equal(pm.environment.get('skuNumber2'));",
									"        tests[\"Merged Cart having Sku with price=\"+pm.environment.get('price2')]=pm.expect(''+jsonData.cartData[0].price+'').to.equal(pm.environment.get('price2'));",
									"    "
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Beraer {{accessToken}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"lang\":\"en\",\"userType\":\"buyer\",\"orgIdfier\":\"scg\",\"userId\":{{userId}},\"cartItems\":[{\"cartIdfier\":\"{{timeInSeconds2}}-16937B81423\",\"skuNumber\":\"{{skuNumber2}}\",\"sellerId\":{{sellerId2}},\"quantity\":1,\"installationRequired\":false,\"sampleItem\":false,\"installationType\":\"\",\"price\":{{price2}},\"sequence\":{{timeInSeconds2}},\"removed\":false}]}"
						},
						"url": {
							"raw": "{{environment}}/order-service/merge-carts",
							"host": [
								"{{environment}}"
							],
							"path": [
								"order-service",
								"merge-carts"
							]
						}
					},
					"response": []
				},
				{
					"name": "WhishList",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "993ebd89-fd1e-4d66-aac2-448f5a7cec11",
								"exec": [
									"pm.test(\"Response status is ok\",function(){",
									"    pm.response.to.have.status(200);",
									"})",
									"pm.test(\"response should be okay to process\", function () { ",
									"    pm.response.to.not.be.error; ",
									"    pm.response.to.not.have.jsonBody(\"error\"); ",
									"    pm.response.to.have.jsonBody();",
									"    ",
									"})",
									"",
									"   var jsonData = JSON.parse(responseBody); ",
									"   console.log(jsonData);",
									"   var lengths=jsonData.length;",
									"   console.log(lengths);",
									"   ",
									"   if(lengths===0)",
									"   { ",
									"     tests[\"Whishlist is empty\"]=pm.expect(jsonData.length).to.equal( 0);",
									"     console.log(\"Whishlist is empty\")",
									"      ",
									"   }",
									"   else",
									"   {",
									"         tests[\"Whishlist   have Property orgIdfier \"]= pm.expect(jsonData[0]).to.have.property('orgIdfier');",
									"         tests[\"Whishlist   have Property price\"]= pm.expect(jsonData[0]).to.have.property('price');",
									"         tests[\"Whishlist   have Property skuNumber \"]= pm.expect(jsonData[0]).to.have.property('skuNumber');",
									"         tests[\"Whishlist   have Property userId\"]= pm.expect(jsonData[0]).to.have.property('userId');",
									"       ",
									"   }",
									"   ",
									"",
									"  "
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{environment}}/buyer-service/wishlists?lang=en&userType=buyer&orgIdfier=scg&userId={{userId}}",
							"host": [
								"{{environment}}"
							],
							"path": [
								"buyer-service",
								"wishlists"
							],
							"query": [
								{
									"key": "lang",
									"value": "en"
								},
								{
									"key": "userType",
									"value": "buyer"
								},
								{
									"key": "orgIdfier",
									"value": "scg"
								},
								{
									"key": "userId",
									"value": "{{userId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Address_Check",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "0f1b885c-d662-4335-87e3-c4c6547fa8a8",
								"exec": [
									"pm.test(\"Response status is ok\",function(){",
									"    pm.response.to.have.status(200);",
									"})",
									"pm.test(\"response should be okay to process\", function () { ",
									"    pm.response.to.not.be.error; ",
									"    pm.response.to.not.have.jsonBody(\"error\"); ",
									"    pm.response.to.have.jsonBody();",
									"    ",
									"})",
									"",
									"   var jsonData = JSON.parse(responseBody); ",
									"   console.log(jsonData);",
									"   var lengths=jsonData.length;",
									"   console.log(lengths);",
									"   if(lengths===0)",
									"   {",
									"       tests[\"Deafault address is not present \"]=jsonData.length;",
									"   }",
									"   else",
									"   {",
									"        var addressIdfier=jsonData[0].addressIdfier",
									"        postman.setEnvironmentVariable('addressIdfier',addressIdfier);",
									"        tests[\"Address   have Property addressLine1 \"]= pm.expect(jsonData[0]).to.have.property('addressLine1');",
									"        tests[\"Address   have Property city\"]= pm.expect(jsonData[0]).to.have.property('city');",
									"        tests[\"Address   have Property districtCode \"]= pm.expect(jsonData[0]).to.have.property('districtCode');",
									"         tests[\"Address   have Property districtName \"]= pm.expect(jsonData[0]).to.have.property('districtName');",
									"        tests[\"Address   have Property fullName\"]= pm.expect(jsonData[0]).to.have.property('fullName');",
									"        tests[\"Address   have Property phoneNo \"]= pm.expect(jsonData[0]).to.have.property('phoneNo');",
									"         tests[\"Address   have Property subDistrictCode \"]= pm.expect(jsonData[0]).to.have.property('subDistrictCode');",
									"         var subDistrictCode=jsonData[0].subDistrictCode;",
									"         postman.setEnvironmentVariable('subDistrictCode',subDistrictCode);",
									"        tests[\"Address   have Property subDistrictName\"]= pm.expect(jsonData[0]).to.have.property('subDistrictName');",
									"        ",
									"        tests[\"Address   have Property zipCode \"]= pm.expect(jsonData[0]).to.have.property('zipCode');",
									"        var zipCode=jsonData[0].zipCode;",
									"         postman.setEnvironmentVariable('zipCode',zipCode);",
									"          var fullName=jsonData[0].fullName;",
									"         postman.setEnvironmentVariable('fullName',fullName);",
									"         var city=jsonData[0].city;",
									"         postman.setEnvironmentVariable('city',city);",
									"         var addressLine1=jsonData[0].addressLine1;",
									"         postman.setEnvironmentVariable('addressLine1',addressLine1);",
									"         var subDistrictName=jsonData[0].subDistrictName;",
									"         postman.setEnvironmentVariable('subDistrictName',subDistrictName);",
									"         var districtName=jsonData[0].districtName;",
									"         postman.setEnvironmentVariable('districtName',districtName);",
									"         var districtCode=jsonData[0].districtCode;",
									"         postman.setEnvironmentVariable('districtCode',districtCode);",
									"          var phoneNo=jsonData[0].phoneNo;",
									"         postman.setEnvironmentVariable('phoneNo',phoneNo);",
									"         ",
									"        ",
									"   }",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{environment}}/buyer-service/address?lang=en&userType=buyer&orgIdfier=scg&userId={{userId}}",
							"host": [
								"{{environment}}"
							],
							"path": [
								"buyer-service",
								"address"
							],
							"query": [
								{
									"key": "lang",
									"value": "en"
								},
								{
									"key": "userType",
									"value": "buyer"
								},
								{
									"key": "orgIdfier",
									"value": "scg"
								},
								{
									"key": "userId",
									"value": "{{userId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "OverView",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "2a08eae7-e4d9-443e-bcfb-d6a620eb2068",
								"exec": [
									"pm.test(\"Response status is ok\",function(){",
									"pm.environment.set(\"variable_key\", \"variable_value\");    pm.response.to.have.status(200);",
									"})",
									"pm.test(\"response should be okay to process\", function () { ",
									"    pm.response.to.not.be.error; ",
									"    pm.response.to.not.have.jsonBody(\"error\"); ",
									"    pm.response.to.have.jsonBody();",
									"    ",
									"})",
									"",
									"",
									"   var jsonData = JSON.parse(responseBody); ",
									"   console.log(jsonData);",
									"   if(jsonData.shipments.length>=1)",
									"   {",
									"   var miscData= jsonData.miscData",
									"   postman.setEnvironmentVariable('miscData',miscData);",
									"   var OptionType=jsonData.shipments[0].selectedDeliveryOption.optionType",
									"   var shipmentIdfier=jsonData.shipments[0].shipmentIdfier",
									"   postman.setEnvironmentVariable('OptionType',OptionType);",
									"   postman.setEnvironmentVariable('shipmentIdfier',shipmentIdfier);",
									"   var totalShippingCost=jsonData.totalShippingCost",
									"   console.log(totalShippingCost);",
									"   const totalItemsPrice=jsonData.totalItemsPrice",
									"    console.log(totalItemsPrice);",
									"   var Handlingcost=jsonData.totalHandlingCost",
									"   console.log(Handlingcost);",
									"   var totalPrice=jsonData.totalPrice;",
									"   postman.setEnvironmentVariable('totalPrice',totalPrice)",
									"   var total=totalShippingCost+Handlingcost+totalItemsPrice",
									"   console.log(total);",
									"  tests[\"item price=\"+pm.environment.get('price2')]=pm.expect(''+jsonData.totalItemsPrice+'').to.equal(pm.environment.get('price2'));",
									"  tests[\"Total price should be equal \"]=pm.expect(total).to.equal(totalPrice);",
									"   }",
									"   else",
									"   {",
									"       tests[\"No shipments available\"]= jsonData.shipments.length",
									"        ",
									"       ",
									"   }",
									"   "
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "  {\"lang\":\"en\",\"userType\":\"buyer\",\"orgIdfier\":\"scg\",\"destinationSubDistrictCode\":\"{{subDistrictCode}}\",\"cartId\":\"{{timeInSeconds2}}-{{userId}}\",\"requestId\":\"16994D01BAA-1696B193852-{{timeInSeconds2}}\",\"cartItems\":{{jsonData}},\"destinationZipCode\":\"{{zipCode}}\",\"couponCode\":\"\",\"userId\":{{userId}}}"
						},
						"url": {
							"raw": "{{environment}}/order-service/preorder/overview",
							"host": [
								"{{environment}}"
							],
							"path": [
								"order-service",
								"preorder",
								"overview"
							]
						}
					},
					"response": []
				},
				{
					"name": "Save_Order",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "add33391-506d-4cbb-b561-3a9232d05e73",
								"exec": [
									"pm.test(\"Response status is ok\",function(){",
									"    pm.response.to.have.status(200);",
									"})",
									"pm.test(\"response should be okay to process\", function () { ",
									"    pm.response.to.not.be.error; ",
									"    pm.response.to.not.have.jsonBody(\"error\"); ",
									"    pm.response.to.have.jsonBody();",
									"    ",
									"})",
									"",
									"",
									"   var jsonData = JSON.parse(responseBody); ",
									"   console.log(jsonData);",
									"   tests[\"Save Order Having the Property orderNo\"]=pm.expect(jsonData).to.have.property('orderNo')",
									"   var orderNo=jsonData.orderNo;",
									"   postman.setEnvironmentVariable('orderNo',orderNo)",
									"   tests[\"Save Order Having the Property status\"]=pm.expect(jsonData).to.have.property('status')"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"lang\":\"en\",\"userType\":\"buyer\",\"orgIdfier\":\"scg\",\"userId\":{{userId}},\"deliveryAddress\":{\"orgIdfier\":\"scg\",\"addressIdfier\":\"{{addressIdfier}}\",\"userId\":{{userId}},\"defaultAddress\":true,\"fullName\":\"{{fullName}}\",\"phoneNo\":\"{{phoneNo}}\",\"city\":\"{{city}}\",\"state\":null,\"country\":null,\"zipCode\":\"{{zipCode}}\",\"addressLine1\":\"{{addressLine1}}\",\"addressLine2\":null,\"subDistrictName\":\"{{subDistrictName}}\",\"subDistrictCode\":\"{{subDistrictCode}}\",\"districtName\":\"{{districtName}}\",\"districtCode\":\"{{districtCode}}\",\"shipTo\":\"Ships to ({{zipCode}})\"},\"billingAddress\":\"\",\"guestUser\":false,\"userEmail\":\"{{email}}\",\"orderNo\":null,\"selectedShippingMethods\":{\"{{shipmentIdfier}}\":\"{{OptionType}}\"},\"misc\":\"{{miscData}}\"\n}"
						},
						"url": {
							"raw": "{{environment}}/order-service/saveorder",
							"host": [
								"{{environment}}"
							],
							"path": [
								"order-service",
								"saveorder"
							]
						}
					},
					"response": []
				},
				{
					"name": "SavedCards",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a3bb7d14-001f-4222-8107-547cd2d7306b",
								"exec": [
									"pm.test(\"Response status is ok\",function(){",
									"    pm.response.to.have.status(200);",
									"})",
									"pm.test(\"response should be okay to process\", function () { ",
									"    pm.response.to.not.be.error; ",
									"    pm.response.to.not.have.jsonBody(\"error\"); ",
									"    pm.response.to.have.jsonBody();",
									"    ",
									"})",
									"",
									"",
									"   var jsonData = JSON.parse(responseBody); ",
									"   console.log(jsonData);",
									"   tests[\"Saved Card Having the Property orgIdfier\"]=pm.expect(jsonData[0]).to.have.property('orgIdfier')",
									"    tests[\"Saved Card Having the Property userCardId\"]=pm.expect(jsonData[0]).to.have.property('userCardId')",
									"     tests[\"Saved Card Having the Property userId\"]=pm.expect(jsonData[0]).to.have.property('userId')",
									"      tests[\"Saved Card Having the Property maskedCardInfo\"]=pm.expect(jsonData[0]).to.have.property('maskedCardInfo')",
									"       tests[\"Saved Card Having the Property cardType\"]=pm.expect(jsonData[0]).to.have.property('cardType')",
									"   var userCardId=jsonData[0].userCardId;",
									"   postman.setEnvironmentVariable('userCardId',userCardId)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{environment}}/order-service/savedcards/{{userId}}?lang=en&userType=buyer&orgIdfier=scg",
							"host": [
								"{{environment}}"
							],
							"path": [
								"order-service",
								"savedcards",
								"{{userId}}"
							],
							"query": [
								{
									"key": "lang",
									"value": "en"
								},
								{
									"key": "userType",
									"value": "buyer"
								},
								{
									"key": "orgIdfier",
									"value": "scg"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "ClearCart",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ada90f45-141a-45b4-b45b-8d829c3fad30",
								"exec": [
									"pm.test(\"Response status is ok\",function(){",
									"    pm.response.to.have.status(200);",
									"})",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{environment}}/order-service/clear-carts?lang=en&userType=buyer&orgIdfier=scg&userId={{userId}}",
							"host": [
								"{{environment}}"
							],
							"path": [
								"order-service",
								"clear-carts"
							],
							"query": [
								{
									"key": "lang",
									"value": "en"
								},
								{
									"key": "userType",
									"value": "buyer"
								},
								{
									"key": "orgIdfier",
									"value": "scg"
								},
								{
									"key": "userId",
									"value": "{{userId}}"
								}
							]
						}
					},
					"response": []
				}
			]
		}
	]
}