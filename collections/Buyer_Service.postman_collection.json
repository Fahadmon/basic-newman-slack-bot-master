{
	"info": {
		"_postman_id": "55d98e2e-fcc7-4dbf-aff6-b5604956ddf0",
		"name": "Buyer_Service",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Filters And Seraches",
			"item": [
				{
					"name": "Filter_By_Category_Marble",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c179dc34-96fd-4492-a674-780424799967",
								"exec": [
									"pm.test(\"Response status is ok\",function(){",
									"    pm.response.to.have.status(200);",
									"})",
									"pm.test(\"response should be okay to process\", function () { ",
									"    pm.response.to.not.be.error; ",
									"    pm.response.to.not.have.jsonBody(\"error\"); ",
									"    pm.response.to.have.jsonBody();",
									"    ",
									"})",
									"pm.test(\"Body Contains IN_STOCK\", function () {",
									"pm.environment.unset(\"variable_key\");",
									"    pm.expect(pm.response.text()).to.include(\"IN_STOCK\");",
									"});",
									"",
									"  ",
									"   var jsonData = JSON.parse(responseBody); ",
									"   console.log(jsonData)",
									"  ",
									"  tests[\"IN_STOCK Filter is Present\"]= jsonData[0].items[0].code   === \"IN_STOCK\";",
									"  tests[\"OUT_OF_STOCK Filter is Present\"]= jsonData[0].items[1].code   === \"OUT_OF_STOCK\";",
									"  tests[\"COMING_SOON Filter is Present\"]= jsonData[0].items[2].code   === \"COMING_SOON\";",
									"  tests[\"Custom-Made Filter is Present\"]= jsonData[0].items[3].code   === \"isMadeToOrder.code\";",
									"  tests[\"Rating Filter is Present\"]= jsonData[1].items[0].code   === \"rating\";",
									"  tests[\"Price Filter is present\"]=jsonData[2].type   === \"price\";",
									"  tests[\"On Price Promotion Offer Filter is Present\"]= jsonData[3].items[0].label   === \"buyer.product.onpromotion\";",
									"  tests[\"Eligible For Shipping Promotion Filter is Present\"]= jsonData[3].items[1].label   === \"buyer.product.onshippingpromotion\";",
									"  tests[\"Eligible For Free Shipping Filter is Present\"]= jsonData[3].items[2].label   === \"buyer.product.onfreeshipping\";",
									"  tests[\"Free Sample Available Filter is Present\"]= jsonData[3].items[3].label   === \"buyer.product.preview_product\";",
									"  tests[\"Seller Filter is Present\"]= jsonData[16].name   === \"buyer.filter.sellername\";",
									"  ",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{token}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"lang\":\"en\",\"userType\":\"buyer\",\"orgIdfier\":\"scg\",\"f\":[{\"field\":\"primaryCategory.o_id\",\"type\":\"category\",\"codes\":[\"129\"]}],\"page\":1}"
						},
						"url": {
							"raw": "https://qa.nocnoc-internal.com/buyer-service/filters",
							"protocol": "https",
							"host": [
								"qa",
								"nocnoc-internal",
								"com"
							],
							"path": [
								"buyer-service",
								"filters"
							]
						}
					},
					"response": []
				},
				{
					"name": "Search_By_Category_Marble",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "76435830-07ce-479b-9837-ad55ebae9bb8",
								"exec": [
									"",
									"pm.test(\"Response status is ok\",function(){",
									"    pm.response.to.have.status(200);",
									"})",
									"pm.test(\"response should be okay to process\", function () { ",
									"    pm.response.to.not.be.error; ",
									"    pm.response.to.not.have.jsonBody(\"error\"); ",
									"    pm.response.to.have.jsonBody();",
									"    ",
									"})",
									"",
									"   var jsonData = JSON.parse(responseBody); ",
									"   console.log(jsonData)",
									"   ",
									"   tests[\"Page  should be 1\"]= jsonData.page   === 1;",
									"   tests[\"First page should display 32 products\"]= jsonData.limit   === 32;",
									"   tests[\"Every Product should have brand\"]= pm.expect(jsonData.items[0]).to.have.property('brand');",
									"   tests[\"Every Product should have price\"]= pm.expect(jsonData.items[0]).to.have.property('price');",
									"   tests[\"Every Product should have rating\"]= pm.expect(jsonData.items[0]).to.have.property('rating');",
									"   tests[\"Every Product should have skuName\"]= pm.expect(jsonData.items[0]).to.have.property('skuName');",
									"   tests[\"Every Product should have skuNumber\"]= pm.expect(jsonData.items[0]).to.have.property('skuNumber');",
									"   tests[\"Every Product should have supplierId\"]= pm.expect(jsonData.items[0]).to.have.property('supplierId');",
									"   tests[\"Category Should be marble for all searched product\"]= jsonData.items[0].categoryId=129;",
									"  var random1= Math.floor(Math.random() * 32);",
									"  var random2= Math.floor(Math.random() * 32);",
									"  var skuNumber1=jsonData.items[random1].skuNumber;",
									"  var skuName1=jsonData.items[random1].skuName;",
									"  var skuNumber2=jsonData.items[random2].skuNumber;",
									"  var skuName2=jsonData.items[random2].skuName;",
									"   postman.setEnvironmentVariable('skuNumber1', skuNumber1);",
									"    postman.setEnvironmentVariable('skuName1', skuName1);",
									"     postman.setEnvironmentVariable('skuName2', skuName2);",
									"   postman.setEnvironmentVariable('skuNumber2',skuNumber2);",
									"   ",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "474917f6-072d-45f4-b42d-1a6bd41be5fb",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{token}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"lang\":\"en\",\"userType\":\"buyer\",\"orgIdfier\":\"scg\",\"f\":[{\"field\":\"primaryCategory.o_id\",\"type\":\"category\",\"codes\":[\"129\"]}],\"limit\":32,\"page\":1,\"transformData\":true}"
						},
						"url": {
							"raw": "{{environment}}/buyer-service/search",
							"host": [
								"{{environment}}"
							],
							"path": [
								"buyer-service",
								"search"
							]
						}
					},
					"response": []
				},
				{
					"name": "Search_By_Price-Low To High",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "a2b8f16d-3f9b-4b45-9462-775130744f88",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "b9109c73-9eed-49d1-8cdd-331bd0ca8208",
								"exec": [
									"pm.test(\"Response status is ok\",function(){",
									"    pm.response.to.have.status(200);",
									"})",
									"pm.test(\"response should be okay to process\", function () { ",
									"    pm.response.to.not.be.error; ",
									"    pm.response.to.not.have.jsonBody(\"error\"); ",
									"    pm.response.to.have.jsonBody();",
									"    ",
									"})",
									"",
									"   var jsonData = JSON.parse(responseBody); ",
									"   console.log(jsonData);",
									"   var price1= jsonData.items[0].price.originalPrice;",
									"   var price2= jsonData.items[10].price.originalPrice;",
									"   var price3= jsonData.items[20].price.originalPrice;",
									"   console.log(price1);",
									"   console.log(price2);",
									"   console.log(price3);",
									"   pm.test(\"price shorted Low To High\", function () { ",
									"       if(price3>=price2 && price2>=price1)",
									"        {",
									"            ",
									"            pm.response.to.be.success;",
									"        }",
									"        else",
									"        {",
									"            pm.response.to.not.be.success;",
									"        }",
									"    ",
									"})",
									"   "
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{token}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"lang\":\"en\",\"userType\":\"buyer\",\"orgIdfier\":\"scg\",\"f\":[{\"field\":\"primaryCategory.o_id\",\"type\":\"category\",\"codes\":[\"129\"]},{\"field\":\"stockStatus\",\"operator\":\"eq\",\"codes\":[\"IN_STOCK\",\"COMING_SOON\",\"isMadeToOrder.code\"]}],\"sort\":\"plh\",\"limit\":32,\"page\":1,\"transformData\":true}"
						},
						"url": {
							"raw": "{{environment}}/buyer-service/search",
							"host": [
								"{{environment}}"
							],
							"path": [
								"buyer-service",
								"search"
							]
						}
					},
					"response": []
				},
				{
					"name": "Search_By_Price-High To Low",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "28f3227b-6abe-44a6-8f88-833afc98e2f2",
								"exec": [
									"pm.test(\"Response status is ok\",function(){",
									"    pm.response.to.have.status(200);",
									"})",
									"pm.test(\"response should be okay to process\", function () { ",
									"    pm.response.to.not.be.error; ",
									"    pm.response.to.not.have.jsonBody(\"error\"); ",
									"    pm.response.to.have.jsonBody();",
									"    ",
									"})",
									"",
									"   var jsonData = JSON.parse(responseBody); ",
									"   console.log(jsonData);",
									"   var price1= jsonData.items[0].price.originalPrice;",
									"   var price2= jsonData.items[10].price.originalPrice;",
									"   var price3= jsonData.items[20].price.originalPrice;",
									"   console.log(price1);",
									"   console.log(price2);",
									"   console.log(price3);",
									"   pm.test(\"price shorted High To Low\", function () { ",
									"       if(price1>=price2 && price2>=price3)",
									"        {",
									"            ",
									"            pm.response.to.be.success;",
									"        }",
									"        else",
									"        {",
									"            pm.response.to.not.be.success;",
									"        }",
									"    ",
									"})",
									"   ",
									"   "
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"lang\":\"en\",\"userType\":\"buyer\",\"orgIdfier\":\"scg\",\"f\":[{\"field\":\"primaryCategory.o_id\",\"type\":\"category\",\"codes\":[\"129\"]},{\"field\":\"stockStatus\",\"operator\":\"eq\",\"codes\":[\"IN_STOCK\",\"COMING_SOON\",\"isMadeToOrder.code\"]}],\"sort\":\"phl\",\"limit\":32,\"page\":1,\"transformData\":true}"
						},
						"url": {
							"raw": "{{environment}}/buyer-service/search",
							"host": [
								"{{environment}}"
							],
							"path": [
								"buyer-service",
								"search"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Compare Product",
			"item": [
				{
					"name": "Add_1_Products_To_Compare",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "953658ee-46ec-4204-bda5-b81a45ac9a48",
								"exec": [
									"pm.test(\"Response status is ok\",function(){",
									"    pm.response.to.have.status(200);",
									"})",
									"pm.test(\"response should be okay to process\", function () { ",
									"    pm.response.to.not.be.error; ",
									"    pm.response.to.not.have.jsonBody(\"error\"); ",
									"    pm.response.to.have.jsonBody();",
									"    ",
									"})",
									"",
									"   var jsonData = JSON.parse(responseBody); ",
									"   console.log(jsonData);",
									"   var skuNumber1=postman.getEnvironmentVariable(\"skuNumber1\")",
									"   tests[\"Added Product for comparison contains skuNumber\"+skuNumber1]= jsonData[skuNumber1].skuNumber==skuNumber1"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{environment}}/buyer-service/products-basic-info?lang=en&userType=buyer&orgIdfier=scg&category=Marble-Tile&skuNumber={{skuNumber1}}",
							"host": [
								"{{environment}}"
							],
							"path": [
								"buyer-service",
								"products-basic-info"
							],
							"query": [
								{
									"key": "lang",
									"value": "en"
								},
								{
									"key": "userType",
									"value": "buyer"
								},
								{
									"key": "orgIdfier",
									"value": "scg"
								},
								{
									"key": "category",
									"value": "Marble-Tile"
								},
								{
									"key": "skuNumber",
									"value": "{{skuNumber1}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Add_2_Products_To_Comapre",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "538be773-5bf0-4410-b536-d97203f87d6e",
								"exec": [
									"pm.test(\"Response status is ok\",function(){",
									"    pm.response.to.have.status(200);",
									"})",
									"pm.test(\"response should be okay to process\", function () { ",
									"    pm.response.to.not.be.error; ",
									"    pm.response.to.not.have.jsonBody(\"error\"); ",
									"    pm.response.to.have.jsonBody();",
									"    ",
									"})",
									"  var jsonData = JSON.parse(responseBody); ",
									"  console.log(jsonData)",
									"  var skuNumber1=postman.getEnvironmentVariable(\"skuNumber1\")",
									"  var skuNumber2=postman.getEnvironmentVariable(\"skuNumber2\")",
									"  tests[\"Added Product for comparison contains skuNumber\"+skuNumber1]= jsonData[skuNumber1].skuNumber==skuNumber1",
									"  tests[\"Added Product for comparison contains skuNumber\"+skuNumber2]= jsonData[skuNumber2].skuNumber==skuNumber2"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{token}}",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{environment}}/buyer-service/products-basic-info?lang=en&userType=buyer&orgIdfier=scg&category=Marble-Tile&skuNumber={{skuNumber1}},{{skuNumber2}}",
							"host": [
								"{{environment}}"
							],
							"path": [
								"buyer-service",
								"products-basic-info"
							],
							"query": [
								{
									"key": "lang",
									"value": "en"
								},
								{
									"key": "userType",
									"value": "buyer"
								},
								{
									"key": "orgIdfier",
									"value": "scg"
								},
								{
									"key": "category",
									"value": "Marble-Tile"
								},
								{
									"key": "skuNumber",
									"value": "{{skuNumber1}},{{skuNumber2}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Compare_Product",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "0a4e5cc0-6ff0-44e8-8f22-5ef03f3c922c",
								"exec": [
									"pm.test(\"Response status is ok\",function(){",
									"    pm.response.to.have.status(200);",
									"})",
									"pm.test(\"response should be okay to process\", function () { ",
									"    pm.response.to.not.be.error; ",
									"    pm.response.to.not.have.jsonBody(\"error\"); ",
									"    pm.response.to.have.jsonBody();",
									"    ",
									"})",
									"var jsonData = JSON.parse(responseBody); ",
									"  console.log(jsonData)",
									"    var skuNumber1=postman.getEnvironmentVariable(\"skuNumber1\")",
									"  var skuNumber2=postman.getEnvironmentVariable(\"skuNumber2\")",
									"  tests[\"Added Product for comparison contains skuNumber\"+skuNumber1]= jsonData[skuNumber1].skuNumber==skuNumber1",
									"  tests[\"Added Product for comparison contains skuNumber\"+skuNumber2]= jsonData[skuNumber2].skuNumber==skuNumber2",
									"  tests[\"Compared Attribute Length is equla to 36 \"]=jsonData.comparableAttributes.length==36"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{environment}}/buyer-service/product-comparison-details?lang=en&userType=buyer&orgIdfier=scg&category=Marble-Tile&skuNumbers={{skuNumber1}},{{skuNumber2}}&skuNumber={{skuNumber1}},{{skuNumber2}}",
							"host": [
								"{{environment}}"
							],
							"path": [
								"buyer-service",
								"product-comparison-details"
							],
							"query": [
								{
									"key": "lang",
									"value": "en"
								},
								{
									"key": "userType",
									"value": "buyer"
								},
								{
									"key": "orgIdfier",
									"value": "scg"
								},
								{
									"key": "category",
									"value": "Marble-Tile"
								},
								{
									"key": "skuNumbers",
									"value": "{{skuNumber1}},{{skuNumber2}}"
								},
								{
									"key": "skuNumber",
									"value": "{{skuNumber1}},{{skuNumber2}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Remove_1_Item_From_Compare",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "205cab51-a375-484a-821f-f47caa2b81f0",
								"exec": [
									"pm.test(\"Response status is ok\",function(){",
									"    pm.response.to.have.status(200);",
									"})",
									"pm.test(\"response should be okay to process\", function () { ",
									"    pm.response.to.not.be.error; ",
									"    pm.response.to.not.have.jsonBody(\"error\"); ",
									"    pm.response.to.have.jsonBody();",
									"    ",
									"})",
									"var jsonData = JSON.parse(responseBody); ",
									"   console.log(jsonData);",
									"   var skuNumber1=postman.getEnvironmentVariable(\"skuNumber1\")",
									"   var skuNumber2=postman.getEnvironmentVariable(\"skuNumber2\")",
									"   tests[\"Removed SkuNumber is\"+skuNumber2]= jsonData[skuNumber1].skuNumber!=skuNumber2"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{environment}}/buyer-service/products-basic-info?lang=en&userType=buyer&orgIdfier=scg&category=Marble-Tile&skuNumbers={{skuNumber1}},{{skuNumber2}}&skuNumber={{skuNumber1}}",
							"host": [
								"{{environment}}"
							],
							"path": [
								"buyer-service",
								"products-basic-info"
							],
							"query": [
								{
									"key": "lang",
									"value": "en"
								},
								{
									"key": "userType",
									"value": "buyer"
								},
								{
									"key": "orgIdfier",
									"value": "scg"
								},
								{
									"key": "category",
									"value": "Marble-Tile"
								},
								{
									"key": "skuNumbers",
									"value": "{{skuNumber1}},{{skuNumber2}}"
								},
								{
									"key": "skuNumber",
									"value": "{{skuNumber1}}"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Quick View",
			"item": [
				{
					"name": "product_overview",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "77d977d6-869e-4b8b-b1e5-fb1738d05a50",
								"exec": [
									"pm.test(\"Response status is ok\",function(){",
									"    pm.response.to.have.status(200);",
									"})",
									"pm.test(\"response should be okay to process\", function () { ",
									"    pm.response.to.not.be.error; ",
									"    pm.response.to.not.have.jsonBody(\"error\"); ",
									"    pm.response.to.have.jsonBody();",
									"    ",
									"})",
									"",
									"   var jsonData = JSON.parse(responseBody); ",
									"   console.log(jsonData);",
									"   var skuNumber2=pm.environment.get('skuNumber2');",
									"   var skuName2=pm.environment.get('skuName2');",
									"   pm.test(\"skuNumber \\t\"+skuNumber2 + \"\\tand skuName\\t \"+skuName2+\"\\t are contains in overview \",function(){",
									"     // console.log(jsonData.brand);",
									"      pm.expect(skuNumber2).to.equal(jsonData.skuNumber);",
									"      pm.expect(skuName2).to.equal(jsonData.skuName);",
									"     ",
									"   })",
									"   ",
									"   tests[\"Product Overview have Property  brand\"]= pm.expect(jsonData).to.have.property('brand');",
									"   tests[\"Product Overview have Property  imgGallery\"]= pm.expect(jsonData).to.have.property('imgGallery');",
									"   tests[\"Product Overview have Property  otherDetails\"]= pm.expect(jsonData).to.have.property('otherDetails');",
									"   tests[\"Product Overview have Property  price\"]= pm.expect(jsonData).to.have.property('price');",
									"   tests[\"Product Overview have Property  rating\"]= pm.expect(jsonData).to.have.property('rating');",
									"   tests[\"Product Overview have Property  tabs\"]= pm.expect(jsonData).to.have.property('tabs');",
									"   tests[\"Product Overview have Property  variantYN\"]= pm.expect(jsonData).to.have.property('variantYN');",
									"   tests[\"Product Overview have Property  supplierId\"]= pm.expect(jsonData).to.have.property('supplierId');",
									"   tests[\"Product Overview have Property  sellerName\"]= pm.expect(jsonData).to.have.property('sellerName');",
									"   tests[\"Product Overview have Property  taxInvoiceAvailable\"]= pm.expect(jsonData).to.have.property('taxInvoiceAvailable');",
									"   tests[\"Product Overview have Property  inStock\"]= pm.expect(jsonData).to.have.property('inStock');",
									"   tests[\"Product Overview have Property  freeSampleEnabled\"]= pm.expect(jsonData).to.have.property('freeSampleEnabled');",
									"   tests[\"Product Overview have Property  customMade\"]= pm.expect(jsonData).to.have.property('customMade');",
									"   tests[\"Product Overview have Property  comingSoon\"]= pm.expect(jsonData).to.have.property('comingSoon');",
									"   tests[\"Product Overview have Property  categoryId\"]= pm.expect(jsonData).to.have.property('categoryId');",
									"   tests[\"Product Overview have Property  installationSupport\"]= pm.expect(jsonData).to.have.property('installationSupport');",
									"   tests[\"Product Overview have Property  desc\"]= pm.expect(jsonData).to.have.property('desc');",
									"   tests[\"Product Overview have Property  image\"]= pm.expect(jsonData).to.have.property('image');",
									"   tests[\"Product Overview have Property  name\"]= pm.expect(jsonData).to.have.property('name');",
									" "
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{environment}}/buyer-service/product-overview?lang=en&userType=buyer&orgIdfier=scg&category=Marble-Tile&skuNumber={{skuNumber2}}",
							"host": [
								"{{environment}}"
							],
							"path": [
								"buyer-service",
								"product-overview"
							],
							"query": [
								{
									"key": "lang",
									"value": "en"
								},
								{
									"key": "userType",
									"value": "buyer"
								},
								{
									"key": "orgIdfier",
									"value": "scg"
								},
								{
									"key": "category",
									"value": "Marble-Tile"
								},
								{
									"key": "skuNumber",
									"value": "{{skuNumber2}}"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "PDP ",
			"item": [
				{
					"name": "Product_Details",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d549875d-dcf5-48e6-b90b-4b64908da5a3",
								"exec": [
									"pm.test(\"Response status is ok\",function(){",
									"    pm.response.to.have.status(200);",
									"})",
									"pm.test(\"response should be okay to process\", function () { ",
									"    pm.response.to.not.be.error; ",
									"    pm.response.to.not.have.jsonBody(\"error\"); ",
									"    pm.response.to.have.jsonBody();",
									"    ",
									"})",
									"",
									"   var jsonData = JSON.parse(responseBody); ",
									"   console.log(jsonData);",
									"   var skuNumber1=pm.environment.get('skuNumber1');",
									"   var skuName1=pm.environment.get('skuName1');",
									"   pm.test(\"skuNumber \\t\"+skuNumber1 + \"\\tand skuName\\t \"+skuName1+\"\\t are contains in response \",function(){",
									"     // console.log(jsonData.brand);",
									"      pm.expect(skuNumber1).to.equal(jsonData.skuNumber);",
									"      pm.expect(skuName1).to.equal(jsonData.skuName);",
									"     ",
									"   })",
									"   tests[\"PDP page have Property  brand\"]= pm.expect(jsonData).to.have.property('brand');",
									"   tests[\"PDP page have Property  imgGallery\"]= pm.expect(jsonData).to.have.property('imgGallery');",
									"   tests[\"PDP page have Property  otherDetails\"]= pm.expect(jsonData).to.have.property('otherDetails');",
									"   tests[\"PDP page have Property  price\"]= pm.expect(jsonData).to.have.property('price');",
									"   tests[\"PDP page have Property  productDimensions\"]= pm.expect(jsonData).to.have.property('productDimensions');",
									"   tests[\"PDP page have Property  tabs\"]= pm.expect(jsonData).to.have.property('tabs');",
									"   tests[\"PDP page have Property  variants\"]= pm.expect(jsonData).to.have.property('variants');",
									"   tests[\"PDP page have Property  supplierId\"]= pm.expect(jsonData).to.have.property('supplierId');",
									"   tests[\"PDP page have Property  sellerName\"]= pm.expect(jsonData).to.have.property('sellerName');",
									"   tests[\"PDP page have Property  taxInvoiceAvailable\"]= pm.expect(jsonData).to.have.property('taxInvoiceAvailable');",
									"   tests[\"PDP page have Property  inStock\"]= pm.expect(jsonData).to.have.property('inStock');",
									"   tests[\"PDP page have Property  freeSampleEnabled\"]= pm.expect(jsonData).to.have.property('freeSampleEnabled');",
									"   tests[\"PDP page have Property  customMade\"]= pm.expect(jsonData).to.have.property('customMade');",
									"   tests[\"PDP page have Property  comingSoon\"]= pm.expect(jsonData).to.have.property('comingSoon');",
									"   tests[\"PDP page have Property  categoryId\"]= pm.expect(jsonData).to.have.property('categoryId');",
									"   tests[\"PDP page have Property  installationSupport\"]= pm.expect(jsonData).to.have.property('installationSupport');",
									"   tests[\"PDP page have Property  desc\"]= pm.expect(jsonData).to.have.property('desc');",
									"   tests[\"PDP page have Property  image\"]= pm.expect(jsonData).to.have.property('image');",
									"   tests[\"Product Overview have Property  name\"]= pm.expect(jsonData).to.have.property('name');",
									" "
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{environment}}/buyer-service/product-details?lang=en&userType=buyer&orgIdfier=scg&nameIdfier={{skuName1}}&skuNumber={{skuNumber1}}",
							"host": [
								"{{environment}}"
							],
							"path": [
								"buyer-service",
								"product-details"
							],
							"query": [
								{
									"key": "lang",
									"value": "en"
								},
								{
									"key": "userType",
									"value": "buyer"
								},
								{
									"key": "orgIdfier",
									"value": "scg"
								},
								{
									"key": "nameIdfier",
									"value": "{{skuName1}}"
								},
								{
									"key": "skuNumber",
									"value": "{{skuNumber1}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Required_Accessories",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6a30510f-1cca-48c3-8f24-871bb254f482",
								"exec": [
									"pm.test(\"Response status is ok\",function(){",
									"    pm.response.to.have.status(200);",
									"})",
									"pm.test(\"response should be okay to process\", function () { ",
									"    pm.response.to.not.be.error; ",
									"    pm.response.to.not.have.jsonBody(\"error\"); ",
									"    pm.response.to.have.jsonBody();",
									"    ",
									"})",
									"",
									"   var jsonData = JSON.parse(responseBody); ",
									"   console.log(jsonData);",
									"",
									"   pm.test(\"limit count,pages and totalItems are expected \",function(){",
									"     // console.log(jsonData.brand);",
									"      pm.expect(jsonData.limit).to.equal(50);",
									"      pm.expect(jsonData.page).to.equal(1);",
									"      pm.expect(jsonData.totalItems).to.equal(4);",
									"     ",
									"   })",
									"   ",
									"   tests[\"Required Accessories have Property  brand\"]= pm.expect(jsonData.items[0]).to.have.property('brand');",
									"   tests[\"Required Accessories have Property  price\"]= pm.expect(jsonData.items[0]).to.have.property('price');",
									"   tests[\"Required Accessories have Property  rating\"]= pm.expect(jsonData.items[0]).to.have.property('rating');",
									"   tests[\"Required Accessories have Property  supplierId\"]= pm.expect(jsonData.items[0]).to.have.property('supplierId');",
									"   tests[\"Required Accessories have Property  sellerName\"]= pm.expect(jsonData.items[0]).to.have.property('sellerName');",
									"   tests[\"Required Accessories have Property  taxInvoiceAvailable\"]= pm.expect(jsonData.items[0]).to.have.property('taxInvoiceAvailable');",
									"   tests[\"Required Accessories have Property  inStock\"]= pm.expect(jsonData.items[0]).to.have.property('inStock');",
									"   tests[\"Required Accessories have Property  freeSampleEnabled\"]= pm.expect(jsonData.items[0]).to.have.property('freeSampleEnabled');",
									"   tests[\"Required Accessories have Property  customMade\"]= pm.expect(jsonData.items[0]).to.have.property('customMade');",
									"   tests[\"Required Accessories have Property  comingSoon\"]= pm.expect(jsonData.items[0]).to.have.property('comingSoon');",
									"   tests[\"Required Accessories have Property  categoryId\"]= pm.expect(jsonData.items[0]).to.have.property('categoryId');",
									"   tests[\"Required Accessories have Property  installationSupport\"]= pm.expect(jsonData.items[0]).to.have.property('installationSupport');",
									"   tests[\"Required Accessories have Property  desc\"]= pm.expect(jsonData.items[0]).to.have.property('desc');",
									"   tests[\"Required Accessories have Property  image\"]= pm.expect(jsonData.items[0]).to.have.property('image');",
									" "
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{environment}}/buyer-service/required-accessories?lang=en&userType=buyer&orgIdfier=scg&nameIdfier={{skuName1}}&skuNumber={{skuNumber1}}",
							"host": [
								"{{environment}}"
							],
							"path": [
								"buyer-service",
								"required-accessories"
							],
							"query": [
								{
									"key": "lang",
									"value": "en"
								},
								{
									"key": "userType",
									"value": "buyer"
								},
								{
									"key": "orgIdfier",
									"value": "scg"
								},
								{
									"key": "nameIdfier",
									"value": "{{skuName1}}"
								},
								{
									"key": "skuNumber",
									"value": "{{skuNumber1}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "CoverageArea_Calculator",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "53f127ec-cc53-4033-8b63-b5d5a8e31b71",
								"exec": [
									"pm.test(\"Response status is ok\",function(){",
									"    pm.response.to.have.status(200);",
									"})",
									"pm.test(\"response should be okay to process\", function () { ",
									"    pm.response.to.not.be.error; ",
									"    pm.response.to.not.have.jsonBody(\"error\"); ",
									"    pm.response.to.have.jsonBody();",
									"    ",
									"})",
									"",
									"   var jsonData = JSON.parse(responseBody); ",
									"   console.log(jsonData);",
									"   tests[\"Coverage area have property units \"]=pm.expect(jsonData).to.have.property('units');",
									"   tests[\"Coverage area have property unitsType\"]=pm.expect(jsonData).to.have.property('unitsType');",
									"   tests[\"Coverage area have property originalUnits\"]=pm.expect(jsonData).to.have.property('originalUnits');",
									"   "
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{environment}}/buyer-service/qty-coveragearea?lang=en&userType=buyer&orgIdfier=scg&nameIdfier={{skuName1}}&skuNumber={{skuNumber1}}&area=1000&percWastage=10",
							"host": [
								"{{environment}}"
							],
							"path": [
								"buyer-service",
								"qty-coveragearea"
							],
							"query": [
								{
									"key": "lang",
									"value": "en"
								},
								{
									"key": "userType",
									"value": "buyer"
								},
								{
									"key": "orgIdfier",
									"value": "scg"
								},
								{
									"key": "nameIdfier",
									"value": "{{skuName1}}"
								},
								{
									"key": "skuNumber",
									"value": "{{skuNumber1}}"
								},
								{
									"key": "area",
									"value": "1000"
								},
								{
									"key": "percWastage",
									"value": "10"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Share_Product",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "fc839b5f-1972-4485-9800-82ea58e3d611",
								"exec": [
									"pm.test(\"Response status is ok\",function(){",
									"    pm.response.to.have.status(200);",
									"})",
									"pm.test(\"response should be okay to process\", function () { ",
									"    pm.response.to.not.be.error; ",
									"    pm.response.to.not.have.jsonBody(\"error\"); ",
									"    pm.response.to.have.jsonBody();",
									"    ",
									"})",
									"",
									"   var jsonData = JSON.parse(responseBody); ",
									"   console.log(jsonData);",
									"   var url=jsonData.url",
									"   console.log(url);",
									"   tests[\"Shared Url is valid\"]=pm.expect(url).to.equal(pm.environment.get('environment') + \"/en/p/\" +pm.environment.get('skuName1') + \"/\"+pm.environment.get('skuNumber1')+\"?su=-1\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{environment}}/buyer-service/share-product?lang=en&userType=buyer&orgIdfier=scg&nameIdfier={{skuName1}}&skuNumber={{skuNumber1}}&url={{environment}}/en/p/{{skuName1}}/{{skuNumber1}}",
							"host": [
								"{{environment}}"
							],
							"path": [
								"buyer-service",
								"share-product"
							],
							"query": [
								{
									"key": "lang",
									"value": "en"
								},
								{
									"key": "userType",
									"value": "buyer"
								},
								{
									"key": "orgIdfier",
									"value": "scg"
								},
								{
									"key": "nameIdfier",
									"value": "{{skuName1}}"
								},
								{
									"key": "skuNumber",
									"value": "{{skuNumber1}}"
								},
								{
									"key": "url",
									"value": "{{environment}}/en/p/{{skuName1}}/{{skuNumber1}}"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Cart_Operations",
			"item": [
				{
					"name": "Add_To_Cart",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ebb7d8d7-6434-421c-b61e-1e92567b617d",
								"exec": [
									"pm.test(\"Response status is ok\",function(){",
									"    pm.response.to.have.status(200);",
									"})",
									"pm.test(\"response should be okay to process\", function () { ",
									"    pm.response.to.not.be.error; ",
									"    pm.response.to.not.have.jsonBody(\"error\"); ",
									"    pm.response.to.have.jsonBody();",
									"    ",
									"})",
									"",
									"   var jsonData = JSON.parse(responseBody); ",
									"   console.log(jsonData);",
									"  var sellerid=jsonData[0].sellerId",
									"  console.log(sellerid)",
									"   ",
									"   tests[\"cart product have Property  bulkPrice\"]= pm.expect(jsonData[0]).to.have.property('bulkPrice');",
									"   tests[\"cart product have Property  bulkQuantity\"]= pm.expect(jsonData[0]).to.have.property('bulkQuantity');",
									"   tests[\"cart product have Property  cartIdfier\"]= pm.expect(jsonData[0]).to.have.property('cartIdfier');",
									"   tests[\"cart product have Property  categoryId\"]= pm.expect(jsonData[0]).to.have.property('categoryId');",
									"   tests[\"cart product have Property  comingSoon\"]= pm.expect(jsonData[0]).to.have.property('comingSoon');",
									"   tests[\"cart product have Property  dimensionUnit\"]= pm.expect(jsonData[0]).to.have.property('dimensionUnit');",
									"   tests[\"cart product have Property  quantity\"]= pm.expect(jsonData[0]).to.have.property('quantity');",
									"    tests[\"cart product have Property  inStock\"]= pm.expect(jsonData[0]).to.have.property('inStock');",
									"   tests[\"cart product have Property  itemTotalPrice\"]= pm.expect(jsonData[0]).to.have.property('itemTotalPrice');",
									"   tests[\"cart product have Property  name\"]= pm.expect(jsonData[0]).to.have.property('name')",
									"     tests[\"cart product have Property  skuNumber=\"]= pm.expect(jsonData[0].skuNumber).to.equal(pm.environment.get('skuNumber1'));",
									"  tests[\"cart product have Property  quantity=\"]= pm.expect(jsonData[0].quantity).to.equal(1);",
									"  tests[\"cart product have Property  installationRequired=\"]= pm.expect(jsonData[0].installationRequired).to.equal(false);",
									"  tests[\"cart product have Property  sampleItem=\"]= pm.expect(jsonData[0].sampleItem).to.equal(false);",
									"  "
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"lang\":\"en\",\"userType\":\"buyer\",\"orgIdfier\":\"scg\",\"cartItems\":[{\"cartIdfier\":\"1552899049213-1696B193852\",\"skuNumber\":\"{{skuNumber1}}\",\"sellerId\":{{sellerId1}},\"quantity\":1,\"installationRequired\":false,\"sampleItem\":false,\"installationType\":\"\",\"price\":{{price1}},\"sequence\":1552900906689}]}"
						},
						"url": {
							"raw": "{{environment}}/order-service/cart-products",
							"host": [
								"{{environment}}"
							],
							"path": [
								"order-service",
								"cart-products"
							]
						}
					},
					"response": []
				},
				{
					"name": "Cart_Price",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "7cae4903-2844-400d-823e-3a228a150b51",
								"exec": [
									"pm.test(\"Response status is ok\",function(){",
									"    pm.response.to.have.status(200);",
									"})",
									"pm.test(\"response should be okay to process\", function () { ",
									"    pm.response.to.not.be.error; ",
									"    pm.response.to.not.have.jsonBody(\"error\"); ",
									"    pm.response.to.have.jsonBody();",
									"    ",
									"})",
									"",
									"   var jsonData = JSON.parse(responseBody); ",
									"   console.log(jsonData);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"lang\":\"en\",\"userType\":\"buyer\",\"orgIdfier\":\"scg\",\"cartId\":\"1552899049213-1696B193852\",\"requestId\":\"1698FFEFA72-1696B193852-1552908744230\",\"destinationZipCode\":\"\",\"couponCode\":\"\",\"cartItems\":[{\"cartIdfier\":\"1552899049213-1696B193852\",\"skuNumber\":\"{{skuNumber1}}\",\"sellerId\":{{sellerId1}},\"quantity\":1,\"installationRequired\":false,\"sampleItem\":false,\"installationType\":\"\",\"price\":{{price1}},\"sequence\":1552908737316,\"removed\":false}]}"
						},
						"url": {
							"raw": "{{environment}}/order-service/cart-price",
							"host": [
								"{{environment}}"
							],
							"path": [
								"order-service",
								"cart-price"
							]
						}
					},
					"response": []
				}
			]
		}
	]
}